
{"_id":{"$oid":"5955b9e99115df0005e0f6ce"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"Vue-cli初探(一 }之创建一个项目（小白教程）","key_words":"Vue-cli初探(一 }之创建一个项目（小白教程）","description":"7kb min+gzip 运 DOM ，最省心的优化，这些足以让你暂且放下angular和react来试试","content":"vue-cli 是一个官方发布 vue.js 项目脚手架，使用 vue-cli 可以快速创建 vue 项目，GitHub地址是：\u003chttps://github.com/vuejs/vue-cli\u003e\n#### 一、 安装 Node.js\n\n   首先需要安装node环境，可以直接到中文官网http://nodejs.cn/下载安装包。\n\n   只是这样安装的 node 是固定版本的，如果需要多版本的 node，可以使用 nvm 安装http://blog.csdn.net/s8460049/article/details/52396399\n\n    安装完成后，可以命令行工具中输入 node -v 和 npm -v，如果能显示出版本号，就说明安装成功。\n\n####  二、安装 vue-cli\n安装好了 node，我们可以直接全局安装 vue-cli：\n```javascript \nnpm install -g vue-cli\n```\n但是这种安装方式比较慢，推荐使用国内镜像来安装，所以我们先设置 cnpm：\n```javascript \nnpm install -g cnpm --registry=https://registry.npm.taobao.org  \n```\n 如果安装失败，可以使用 npm cache clean 清理缓存，然后再重新安装。 后面的安装过程中，如有安装失败的情\n 同样可以使用 cnpm -v 查看是否安装成功然后使用 cnpm 安装 vue-cli 和 webpack\n```javascript \ncnpm install -g vue-cli\n```\n最新的 vue 项目模板中，都带有 webpack 插件，所以这里可以不安装 webpack安装完成后，可以使用 vue -V （注意 V 大写）查看是否安装成功\n\n####  三、生成项目\n首先需要在命令行中进入到项目目录，然后输入：\n```javascript\nvue init webpack Vue-Project\n```\n其中 webpack 是模板名称，可以到 vue.js 的 GitHub 上查看更多的模板https://github.com/vuejs-templates\nVue-Project 是自定义的项目名称，命令执行之后，会在当前目录生成一个以该名称命名的项目文件夹\u003c/br\u003e\u003c/br\u003e\n配置完成后，可以看到目录下多出了一个项目文件夹，里面就是 vue-cli 创建的一个基于 webpack 的 vue.js 项目\n然后进入项目目录（cd Vue-Project），使用 cnpm安装依赖\n```javascript\ncnpm install\n```\n然后启动项目\n```javascript\nnpm run dev\n```\n\n#### 四、打包上线\n自己的项目文件都需要放到 src 文件夹下\n项目开发完成之后，可以输入 npm run build 来进行打包工作\n```javascript\nnpm run build\n```\n打包完成后，会生成 dist 文件夹，如果已经修改了文件路径，可以直接打开本地文件查看\n项目上线时，只需要将 dist 文件夹放到服务器就行了。","tag_ids":[{"$oid":"594b3acfb5251300051ac31d"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-05-30T02:39:37.000Z"},"updated_at":{"$date":"2017-07-03T08:48:14.539Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"5956684206edff0005d9b285"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"详解vuex+axios实践","key_words":"vuex,vue","description":"根据 Vuex 文档中的描述，Vuex 是适用于 Vue.js 应用的状态管理库，为应用中的","content":"根据 Vuex 文档中的描述，Vuex 是适用于 Vue.js 应用的状态管理库，为应用中的所有组件提供集中式的状态存储与操作，保证了所有状态以可预测的方式进行修改\n\n案例采用比较全面的post请求作为案例！\n### 一、安装并引入 Vuex、axios\n首先使用 npm 安装 Vuex和axios\n```javascript\nnpm install vuex -s\nnpm install axios -s\n```\n### 二、构建核心仓库 store.js\nVuex 应用的状态 state 都应当存放在 store.js 里面，Vue 组件可以从 store.js 里面获取状态，可以把 store 通\n\n但是和单纯的全局变量又有一些区别，主要体现在当 store 中的状态发生改变时，相应的 vue 组件也会得到高效更新。\n```javascript\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nVue.use(Vuex }\nconst store = new Vuex.Store({\n    state: {\n        projects: []\n    },\n    actions: {\n        LOAD_PROJECT_LIST: function({ commit } } {\n            axios({\n                method: 'post',\n                url: 'https://b.daoapp.io/api/v1/tags/list',\n                data: {\n                    \"offsetHead\": 0,\n                    \"offsetTail\": 100\n                },\n                headers: {\n                    \"User-Name\": \"Alice\"\n                }\n            } }.then((response } =\u003e {\n                console.log(response.data }\n                commit('SET_PROJECT_LIST', { list: response.data.data } }\n            }, (err } =\u003e {\n                console.log(err }\n            } }\n        }\n    },\n    mutations: {\n        SET_PROJECT_LIST: (state, { list } } =\u003e {\n            state.projects = list\n        }\n    },\n    getters: {\n        openProjects: state =\u003e {\n            return state.projects\n        }\n    }\n} }\nexport default store\n```\n### 三、在 main.js 中引入\n```javascript\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\nimport Vuex from 'vuex'\nimport store from './vuex/store'\n\nVue.config.productionTip = false\nVue.use(Vuex }\n    /* eslint-disable no-new */\nnew Vue({\n    el: '#app',\n    router,\n    store,\n    template: '\u003cApp/\u003e',\n    components: { App }\n} }.$mount('#app' }\n```\n### 四、将状态映射到组件 Hello.vue\n```javascript\n\u003ctemplate lang=\"html\"\u003e\n  \u003cdiv id=\"Hello\"\u003e\n    \u003cbutton @click=\"getList\"\u003e获取列表\u003c/button\u003e\n    \u003cp\u003e一共{{projects.count?projects.count:0}}条记录\u003c/P\u003e\n    \u003cul\u003e\n    \u003cli v-for=\"item in projects.list\"\u003e{{item.name}}\u003c/li\u003e\n    \u003c/ul\u003e\n\n  \u003c/div\u003e\n\u003c/template\u003e\n\u003cscript\u003e\n\nexport default {\n  name: 'Hello',\n    methods:{\n    getList:function( }{\n      this.$store.dispatch('LOAD_PROJECT_LIST' }\n    }\n  },\n  computed: {\n  projects ( } {\n     return this.$store.state.projects\n  }\n  \n}\n}\n\u003c/script\u003e\n\u003cstyle\u003e\n  li{\n    list-style:none;\n    display:inline-block;\n    padding:3px 10px;\n    border:1px dashed #ccc;\n    border-radius: 4px;\n    margin: 0 10px;\n  }\n  button{\n    background-color: #3399FF;\n    color: #fff;\n    border: 0;\n    border-radius: 4px;\n    font-size: 18px;\n    padding: 3px 10px;\n  }\n\u003c/style\u003e\n```\n### App.vue\n```javascript\n\u003ctemplate\u003e\n  \u003cdiv id=\"app\"\u003e\n    \u003crouter-view\u003e\u003c/router-view\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\nexport default {\n  name: 'app'\n}\n\u003c/script\u003e\n\n\u003cstyle\u003e\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n\u003c/style\u003e\n\n```\n### router/index.js\n```javascript\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Hello from '@/components/Hello'\n\nVue.use(Router }\n\nexport default new Router({\n    routes: [{\n        path: '/',\n        name: 'Hello',\n        component: Hello\n    }]\n} }\n```\n以上就是整个vuex+axios的案例，下面对案例进行详解\n###  Vuex Store 时关键的 5 个属性：\n* state: state 定义了应用状态的数据结构，同样可以在这里设置默认的初始状态。\n* actions:Actions store.commit( }来调用更改 Store 中的状态。可以在组件中使用dispatch来发出 Actions。\n* mutations: 调用 mutations 是唯一允许更新应用状态的地方。\n* getters: Getters 允许组件从 Store 中获取数据\n* modules: modules 对象允许将单一的 Store 拆分为多个 Store 的同时保存在单一的状态树中。随着应用复杂度的增加，这种拆分能够更好地组织代码\n\n### mapState 是 Vuex 提供的简化数据访问的辅助函数。\n我们视线回到 Hello.vue 容器组件，在该组件中调用this.$store.dispatch('LOAD_PROJECT_LIST }来触发从服务端中加载项目列表\n### mapState函数\n我们通过computed对象来访问 Store 中的状态信息。值得一提的是这里的mapState函数，这里用的是简写，完整的话可以直接访问 Store 对象：\n```javascript\n computed: {\n  projects ( } {\n     return this.$store.state.projects\n  }\n}\n```\n可以改写成\n```javascript\n computed: mapState([\n    'projects'\n  ] }\n```","tag_ids":[{"$oid":"594b3acfb5251300051ac31d"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-06-30T15:03:30.698Z"},"updated_at":{"$date":"2017-06-30T15:03:47.759Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"5959a6b868d1110005eaf002"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"Vue2组件之间的数据传递","key_words":"Vue2,组件","description":"Vue2中组件化的开发让项目变得非常便于管理，那么组件之间的数据传递是必","content":" Vue 的组件作用域都是孤立的，不允许在子组件的模板内直接引用父组件的数据。必须使用特定的方法才能实现组件之间的数据传递。\n\n首先用 vue-cli 创建一个项目，其中 App.vue 是父组件，components 文件夹下都是子组件。\n### 一、父组件向子组件传递数据\n在 Vue 中，可以使用 props 向子组件传递数据。App.vue\n```javascript\n\u003ctemplate\u003e\n  \u003cdiv id=\"app\"\u003e\n    \u003cappHeader :logo=\"logoMsg\"\u003e\u003c/appHeader\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\nimport appHeader from './components/header'\nexport default {\n  name: 'app',\n  data ( } {\n    return {\n      logoMsg: 'AlicePrincess'\n    }\n  },\n  components: {\n    appHeader\n  }\n}\n\u003c/script\u003e\n\n\u003cstyle\u003e\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\u003c/style\u003e\n```\n父组件采用:name=“data”的形式将数据绑定在子组件上\n\n子组件appHeader.vue取值\n```javascript\n\u003ctemplate\u003e\n\u003cheader\u003e\n  \u003cdiv id=\"logo\"\u003e{{logo}}\u003c/div\u003e\n\u003c/header\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\nexport default {\n  name: 'appHeader',\n  props: ['logo']\n}\n\u003c/script\u003e\n\n```\n子组件只需要在props中引入父组件传入的name即可拿到子组件\n### 二、子组件向父组件传递数据\n子组件会通过方法将数据传递给父组件，appHeader.vue\n```javascript\n\u003ctemplate\u003e\n    \u003csection\u003e\n       \u003cinput type=\"text\" v-model=\"username\" @keyup=\"setUser\"\u003e \n    \u003c/section\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n\nexport default {\n    name: 'Login',\n    data( } {\n        return {\n        username: ''\n        }\n    },\n    methods: {\n    setUser: function ( } {\n        this.$emit('transferUser', this.username }\n        }\n    }\n}\n\u003c/script\u003e\n\n```\n父组件接收值@name\n```javascript\n\u003ctemplate\u003e\n  \u003cdiv id=\"app\"\u003e\n    \u003cLogin @transferUser=\"getUser\"\u003e\u003c/Login\u003e\n    \u003cdiv\u003e用户名为：{{user}}\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\nimport Login from './components/login'\nexport default {\n  name: 'app',\n  data ( } {\n    return {\n      user: ''\n    }\n  },\n  methods: {\n    getUser (msg } {\n      this.user = msg\n    }\n  },\n  components: {\n    Login\n  }\n}\n\u003c/script\u003e\n\n\u003cstyle\u003e\n\n\n```","tag_ids":[{"$oid":"594b3acfb5251300051ac31d"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-03T02:06:48.205Z"},"updated_at":{"$date":"2017-07-03T02:07:08.677Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"5959aa0868d1110005eaf003"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"Vue2使用 vue-router 跳转页面","key_words":"路由,Vue","description":"单页面应用需要通过路由跳转页面","content":"使用 Vue.js 做项目的 href，于是 vue-router 应运而生。\n\n官方文档： https://router.vuejs.org/zh-cn/essentials/getting-started.html\n### 一、配置 Router\n\n 用 vue-cli 创建的初始模板里面，并没有 vue-router，需要通过 npm 安装\n```javascript\nnpm i vue-router -D\n```\n安装完成后，在 src 文件夹下，创建一个 routers.js 文件，和 main.js 平级\n\n然后在 router.js 中引入所需的组件，创建 routers 对象\n```javascript\nimport Home from './components/home.vue'\n\nconst routers = [\n  {\n    path: '/home',\n    name: 'home',\n    component: Home\n  }，\n  {\n    path: '/',\n    component: Home\n  }，\n]\nexport default routers\n```\n\n在创建的 routers 对象中， path 配置了路由的路径，component 配置了映射的组件\n\n然后 main.js 也需要修改：\n```javascript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport routers from './routers'\nimport App from './App'\n\nVue.use(VueRouter }\n\nconst router = new VueRouter({\n  mode: 'history',\n  routes: routers\n} }\n\nnew Vue({\n  el: '#app',\n  router,\n  render: h =\u003e h(App }\n} }\n```\n### 二、嵌套路由\n\n在这个实例中，为了加深项目层级，App.vue 只是作为一个存放组件的容器：\n```javascript\n\u003ctemplate\u003e\n  \u003cdiv id=\"app\"\u003e\n    \u003crouter-view\u003e\u003c/router-view\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n```\n其中 \u003crouter-view\u003e 是用来渲染通过路由映射过来的组件，当路径更改时，\u003crouter-view\u003e 中的内容也会发生更改\n\n上面已经配置了两个路由，当打开 http://localhost:8080 或者 http://localhost:8080/home 的时候，就会在 \u003crouter-view\u003e 中渲染 home.vue 组件\n\n \n\nhome.vue 是真正的父组件，first.vue、login.vue 等子 home.vue 中的 \u003crouter-view\u003e\n\n如此一来，就需要在一级路由中嵌套二级路由，修改 routers.js\n```javascript\nimport Home from './components/home.vue'\nimport First from './components/children/first.vue'\nimport Login from './components/children/login.vue'\n\nconst routers = [\n  {\n    path: '/',\n    component: Home,\n　　 children: [ \n　　　{ \n　　　　path: '/', \n 　　　 component: Login \n　　  }\n　　]\n  },\n  {\n    path: '/home',\n    name: 'home',\n    component: Home,\n    children: [\n      {\n        path: '/',\n        name: 'login',\n        component: Login\n      },\n      {\n        path: 'first',\n        name: 'first',\n        component: First\n      } \n    ]\n  }\n]\n\nexport default routers\n```\n在配置的路由后面，添加 children，并在 children 中添加二级路由，就能实现路由嵌套\n\n配置 path 的时候，以 \" / \" 开头的嵌套路径会被当作根路径，所以子路由的 path 不需要添加 \" / \"\n\n### 三、使用 \u003crouter-link\u003e 映射路由\nhome.vue 中引入了 header.vue 组件，其中含有导航菜单\n\n当点击导航菜单的时候，会切换 home.vue 中 \u003crouter-view\u003e 中的内容\n\n这种只需要跳转页面，不需要添加验证方法的情况，可以使用 \u003crouter-link\u003e 来实现导航的功能：\n```javascript\n\u003crouter-link to=\"/home/first\"\u003e{{logo}}\u003c/router-link\u003e\n```\n在编译之后，\u003crouter-link\u003e 会被渲染为 \u003ca\u003e 标签， to 会被渲染为 href \u003crouter-link\u003e 被点击的时候，url 会发生相应的改变\n\n如果使用 v-bind 指令，还可以在 to 后面接变量，配合 v-for 指令可以渲染导航菜单\n\n \n\n如果对于所有 ID 各不相同的用户，都要使用 home 组件来渲染，可以在 routers.js 中添加动态参数：\n```javascript\n{ \n    path: '/home/:id',\n    component: Home\n}\n```\n这样 \"/home/user01\"、\"/home/user02\"、\"/home/user03\" 等路由，都会映射到 Home 组件\n\n然后还可以使用 $route.params.id 来获取到对应的 id\n\n### 四、编程式导航\n\n实际情况下，有很多按钮在执行跳转之前，还会执行一系列方法，这时可以使用 this.$router.push(location } 来修改 url，完成跳转\n\n```javascript\n// 字符串\nthis.$router.push('/home/first' }\n\n// 对象\nthis.$router.push({ path: '/home/first' } }\n\n// 命名的路由\nthis.$router.push({ name: 'home', params: { userId: wise }} }\n```\n获取路由参数：\n```javascript\n{{$route.params.userId}}\n```","tag_ids":[{"$oid":"594b3acfb5251300051ac31d"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-03T02:20:56.114Z"},"updated_at":{"$date":"2017-07-03T02:20:59.751Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"595b31098ae5840005b33781"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"nodejs链接mongodb","key_words":"nodejs,mongodb","description":"MongoDB是一种文档导向数据库管理系统，由C++撰写而成。nodejs和数据库的mongodb的链接","content":"### 一、安装驱动\n```javascript\nnpm install mongodb\n```\n### 二、数据库操作\n与 MySQL 不同的是 MongoDB 会自动创建数据库和集合，所以使用前我们不需要手动去创建。\u003c/br\u003e\n连接数据库\n```javascript\nvar MongoClient = require('mongodb' }.MongoClient;\n//var DB_CONN_STR = 'mongodb://localhost:27017/berk';\n//如果是有权限的在地址后面一定要加参数authSource=admin\nvar DB_CONN_STR = 'mongodb://Jermine:123456@192.168.0.30:27017/berk?authSource=admin';\n```\n插入数据\n```javascript\nvar insertData = function(db, callback } {  \n    //连接到表 user\n    var collection = db.collection('user' };\n   //插入数据\n    var data = [{\"name\":\"Alice\",\"age\":\"24\"},{\"name\":\"Jermine\",\"age\":\"27\"}];\n    collection.insert(data, function(err, result } { \n        if(err }\n        {\n            console.log('Error:'+ err };\n            return;\n        }     \n        callback(result };\n    } };\n}\n  MongoClient.connect(DB_CONN_STR, function(err, db } {\n    console.log(\"连接成功！\" };\n    insertData(db, function(result } {\n        console.log(result };\n        db.close( };\n    } };\n} };\n```\n查询数据\n```javascript\nvar insertData = function(db, callback } {  \n     var collection = db.collection('user' };\n     var whereStr = {\"name\":'Alice'};\n    collection.find(whereStr }.toArray(function(err, result } {\n    if(err }\n    {\n      console.log('Error:'+ err };\n      return;\n    }     \n    callback(result };\n  } };\n}\n\n  MongoClient.connect(DB_CONN_STR, function(err, db } {\n    console.log(\"连接成功！\" };\n    insertData(db, function(result } {\n        console.log(result };\n        db.close( };\n    } };\n} };\n\n```\n更新数据\n```javascript\nvar updateData = function(db, callback } {  \n    //连接到表  \n    var collection = db.collection('user' };\n    //更新数据\n    var whereStr = {\"name\":'Alice'};\n    var updateStr = {$set: { \"age\" : \"20\" }};\n    collection.update(whereStr,updateStr, function(err, result } {\n        if(err }\n        {\n            console.log('Error:'+ err };\n            return;\n        }     \n        callback(result };\n    } };\n}\n```\n删除数据\n```javascript\nvar delData = function(db, callback } {  \n  //连接到表  \n  var collection = db.collection('user' };\n  //删除数据\n  var whereStr = {\"name\":'Alice'};\n  collection.remove(whereStr, function(err, result } {\n    if(err }\n    {\n      console.log('Error:'+ err };\n      return;\n    }     \n    callback(result };\n  } };\n}\n```","tag_ids":[{"$oid":"595b2d928ae5840005b3377f"},{"$oid":"595b2d9c8ae5840005b33780"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:09:13.000Z"},"updated_at":{"$date":"2017-07-04T06:09:19.508Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"595b31e58ae5840005b33782"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"nodejs环境配置","key_words":"node","description":"mac上面的环境配置","content":"### 一、CentOS 下安装 Node.js\n目前只试过mac上的安装，后面会更新windows平台的安装\n* 1、下载源码，你需要在https://nodejs.org/en/download/下载最新的Nodejs版本\n```javascript\ncd /usr/local/src/\nwget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz\n```\n* 2、解压源码\n```javascript\ntar zxvf node-v0.10.24.tar.gz\n```\n* 3、 编译安装\n```javascript\ncd node-v0.10.24\n./configure --prefix=/usr/local/node/0.10.24\nmake\nmake install\n```\n* 4、 配置NODE_HOME，进入profile编辑环境变量\n```javascript\nvim /etc/profile\n```\n设置nodejs环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:\n```javascript\n#set for nodejs\nexport NODE_HOME=/usr/local/node/0.10.24\nexport PATH=$NODE_HOME/bin:$PATH\n```\n:wq保存并退出，编译/etc/profile 使配置生效\n```javascript\nsource /etc/profile\n```\n验证是否安装配置成功\n```javascript\nnode -v\n```\n输出 v0.10.24 表示配置成功\nnpm模块安装路径\n```javascript\n/usr/local/node/0.10.24/lib/node_modules/\n```\n注：Nodejs 官网提供了编译好的Linux二进制包，你也可以下载下来直接应用。","tag_ids":[{"$oid":"595b2d928ae5840005b3377f"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:12:53.000Z"},"updated_at":{"$date":"2017-07-04T06:25:30.530Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"595b34a58ae5840005b33784"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"使用express创建Hello World","key_words":"express,node","description":"Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。\n使用 Express 可以快速地搭建一个完整功能的网站。","content":"###  框架核心特性：\n* 可以设置中间件来响应 HTTP 请求。\n* 定义了路由表用于执行不同的 HTTP 请求动作。\n* 可以通过向模板传递参数来动态渲染 HTML 页面。\n###  安装 Express\n安装 Express 并将其保存到依赖列表中：首先假定你已经安装了 Node.js，接下来为你的应用创建一个目录，然后进入此目录并将其作为当前工作目录。\n```javascript\n$ npm install express --save\n```\n### 创建一个Hello world\n```javascript\nvar express = require('express' };\nvar app = express( };\napp.get('/', function (req, res } {\n  res.send('Hello World!' };\n} };\nvar server = app.listen(3000, function ( } {\n  var host = server.address( }.address;\n  var port = server.address( }.port;\n  console.log('Example app listening at http://%s:%s', host, port };\n} };\n```\n启动应用\n```javascript\nnode app.js\n```\n然后在浏览器中打开 http://localhost:3000/ 并查看输出结果。","tag_ids":[{"$oid":"595b328f8ae5840005b33783"},{"$oid":"595b2d928ae5840005b3377f"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:24:36.000Z"},"updated_at":{"$date":"2017-07-04T06:25:28.032Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"595c965119271000052cfe0b"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"mongoDB操作——基本增删改查","key_words":"mongoDB操作——基本增删改查","description":"mongoDB所有的基本查询方式","content":"### 查询所有\n```javascript\ndb.collection.find(query, projection }\n```\n参数\n* query ：可选，使用查询操作符指定查询条件\n* projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n```javascript\ncollection.find( }\n```\n只有一个条件\n```javascript\ncollection.find({\"name\":\"Alice\"} }\n```\n根据两个及以上的条件查找:\u0026\u0026的关系\n```javascript\ncollection.find({\"name\":\"Alice\",\"age\":24} }\n```\n根据条件查找（$lt:小于, $lte:小于等于,$gt:大于,$gte:大于等于,$ne:不等于）\n```javascript\ncollection.find({\"age\":{$lt:24}} }\n```\n或关系查询\n```javascript\ncollection.find($or: [{\"name\":\"Alice\",\"age\":24}] }\n```\n AND 和 OR 联合使用\n```javascript\ncollection.find({$or:[{\"name\":\"Alice\"},{\"age\":24}],\"id\":{$lt:50}} }\n```\n### 插入数据\n```javascript\ncollection.insert({\"name\":\"Alice\",\"age\":24} }\n```\n\n### 更新数据\n```javascript\ndb.collection.update(\n   \u003cquery\u003e,\n   \u003cupdate\u003e,\n   {\n     upsert: \u003cboolean\u003e,\n     multi: \u003cboolean\u003e,\n     writeConcern: \u003cdocument\u003e\n   }\n }\n```\n参数说明：\n* query : update的查询条件，类似sql update查询内where后面的。\n* update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n* upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n* multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n* writeConcern :可选，抛出异常的级别。\n\n只更新第一条记录：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }} }\n```\n全部更新：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},false,true }\n```\n只添加第一条：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},true,false }\n```\n全部添加加进去:\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},true,true }\n```\n### 删除数据\n```javascript\ndb.collection.remove(\n   \u003cquery\u003e,\n   {\n     justOne: \u003cboolean\u003e,\n     writeConcern: \u003cdocument\u003e\n   }\n }\n```\n参数说明：\n* query :（可选）删除的文档的条件。\n* justOne : （可选）如果设为 true 或 1，则只删除一个文档。\n* writeConcern :（可选）抛出异常的级别。\n\n### 分页查询\n```javascript\ndb.collection.find( }.limit(10 }.skip(10 }\n```\n* limit( }方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。\n* skip方法同样接受一个数字参数作为跳过的记录条数。\n\n### 选择性显示字段\n```javascript\ndb.col.find({},{\"title\":1,_id:0} }.limit(2 }\n```\n### 排序\n*  1 为升序排列，而-1是用于降序排列\n\n```javascript\ndb.COLLECTION_NAME.find( }.sort({KEY:1} }\n```\n### 聚合\n统计某字段值相同的数据\n* 将name字段相同的统计出来 \n\n```javascript\ncollection.aggregate([{$group : {_id : \"$name\", nameAll : {$sum : 1}}}] }\n```\n\n","tag_ids":[{"$oid":"595b2d9c8ae5840005b33780"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-05T07:33:36.000Z"},"updated_at":{"$date":"2017-07-06T03:57:06.451Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"595db5075f22860005a38d35"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"Angular2使用第三方包","key_words":"第三方,Angular","description":"好多js的库很强大，但是没有es6这么方便，npm install也没有，这时候我们需要手动去绑定","content":"### 这里用的是angular-cli\nangular-cli.json\n```javascript\n\"scripts\": [\n         \"./assets/rgbaster.js\",\n         \"./assets/spark-md5.js\"\n      ]\n```\n```javascript\n\"styles\": [\n        \"styles.less\"\n      ]\n```\n然后在需要使用到插件的地方对对象进行实例化\n```javascript\ndeclare var RGBaster: any;\ndeclare var SparkMD5: any;\n```\n然后就可以直接调用啦\n```javascript\nRGBaster.colors(window.URL.createObjectURL(e.target.files[0] }, {  \n      success: function (payload } {\n        // payload.dominant是主色，RGB形式表示\n        // payload.secondary是次色，RGB形式表示\n        // payload.palette是调色板，含多个主要颜色，数组\n    var rgb = payload.dominant.split(',' };\n    var r = parseInt(rgb[0].split('(' }[1] };\n    var g = parseInt(rgb[1] };\n    var b = parseInt(rgb[2].split(' }' }[0] };\n    var hex = \"#\" + ((1 \u003c\u003c 24 } + (r \u003c\u003c 16 } + (g \u003c\u003c 8 } + b }.toString(16 }.slice(1 };\n        console.log(hex };\n      }\n    } };\n```","tag_ids":[{"$oid":"595497139037a30005f7f7d4"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-06T03:56:55.000Z"},"updated_at":{"$date":"2017-07-06T03:57:05.196Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"5965cbe1c88722000549c819"},"user_id":{"$oid":"594b37ee931e2700057d671a"},"title":"Angular2对搜索引擎的优化","key_words":"Angular2,搜索引擎,Angular2 Meta","description":"单页面应用最怕的就是一个写死的标题，那么我们meta标签以及title进行优化","content":"### Angular2已经有了自已封装好的方法\n#### 修改title\n引入Title服务\n```javascript\nimport { Title } from '@angular/platform-browser';\n```\n注册title服务\n```javascript\nconstructor(private titleService: Title } {}\n```\n使用title\n```javascript\nthis.titleService.setTitle(\"自定义Title\" };\n```\n#### 修改Meta\n引入Mate服务\n```javascript\nimport { Meta } from '@angular/platform-browser';\n```\n注册title服务\n```javascript\nconstructor(private meta: Meta } {}\n```\n使用title\n```javascript\nthis.meta.updateTag({ name: 'keywords', content: this.article.key_words } };\nthis.meta.updateTag({ name: 'description', content: this.article.description } };\n```\nMeta封装了很多方法，可以对Meta进行增删改查，但是单页面应用最好不要用新增，不然打开很多次路由之后，Meta对多到你害怕。具体的方法移步去官网看API","tag_ids":[{"$oid":"595497139037a30005f7f7d4"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-12T07:12:33.000Z"},"updated_at":{"$date":"2017-07-12T07:12:38.433Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf135"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"nodejs链接mongodb","key_words":"nodejs,mongodb","description":"MongoDB是一种文档导向数据库管理系统，由C++撰写而成。nodejs和数据库的mongodb的链接","content":"### 一、安装驱动\n```javascript\nnpm install mongodb\n```\n### 二、数据库操作\n与 MySQL 不同的是 MongoDB 会自动创建数据库和集合，所以使用前我们不需要手动去创建。\u003c/br\u003e\n连接数据库\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\n//var DB_CONN_STR = 'mongodb://localhost:27017/berk';\n//如果是有权限的在地址后面一定要加参数authSource=admin\nvar DB_CONN_STR = 'mongodb://Jermine:123456@192.168.0.30:27017/berk?authSource=admin';\n```\n插入数据\n```javascript\nvar insertData = function(db, callback) {  \n    //连接到表 user\n    var collection = db.collection('user');\n   //插入数据\n    var data = [{\"name\":\"Alice\",\"age\":\"24\"},{\"name\":\"Jermine\",\"age\":\"27\"}];\n    collection.insert(data, function(err, result) { \n        if(err)\n        {\n            console.log('Error:'+ err);\n            return;\n        }     \n        callback(result);\n    });\n}\n  MongoClient.connect(DB_CONN_STR, function(err, db) {\n    console.log(\"连接成功！\");\n    insertData(db, function(result) {\n        console.log(result);\n        db.close();\n    });\n});\n```\n查询数据\n```javascript\nvar insertData = function(db, callback) {  \n     var collection = db.collection('user');\n     var whereStr = {\"name\":'Alice'};\n    collection.find(whereStr).toArray(function(err, result) {\n    if(err)\n    {\n      console.log('Error:'+ err);\n      return;\n    }     \n    callback(result);\n  });\n}\n\n  MongoClient.connect(DB_CONN_STR, function(err, db) {\n    console.log(\"连接成功！\");\n    insertData(db, function(result) {\n        console.log(result);\n        db.close();\n    });\n});\n\n```\n更新数据\n```javascript\nvar updateData = function(db, callback) {  \n    //连接到表  \n    var collection = db.collection('user');\n    //更新数据\n    var whereStr = {\"name\":'Alice'};\n    var updateStr = {$set: { \"age\" : \"20\" }};\n    collection.update(whereStr,updateStr, function(err, result) {\n        if(err)\n        {\n            console.log('Error:'+ err);\n            return;\n        }     \n        callback(result);\n    });\n}\n```\n删除数据\n```javascript\nvar delData = function(db, callback) {  \n  //连接到表  \n  var collection = db.collection('user');\n  //删除数据\n  var whereStr = {\"name\":'Alice'};\n  collection.remove(whereStr, function(err, result) {\n    if(err)\n    {\n      console.log('Error:'+ err);\n      return;\n    }     \n    callback(result);\n  });\n}\n```","tag_ids":[{"$oid":"595b2d928ae5840005b3377f"},{"$oid":"595b2d9c8ae5840005b33780"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:09:13.000Z"},"updated_at":{"$date":"2017-10-25T06:41:00.201Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf136"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"nodejs环境配置","key_words":"node","description":"mac上面的环境配置","content":"### 一、CentOS 下安装 Node.js\n目前只试过mac上的安装，后面会更新windows平台的安装\n* 1、下载源码，你需要在https://nodejs.org/en/download/下载最新的Nodejs版本\n```javascript\ncd /usr/local/src/\nwget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz\n```\n* 2、解压源码\n```javascript\ntar zxvf node-v0.10.24.tar.gz\n```\n* 3、 编译安装\n```javascript\ncd node-v0.10.24\n./configure --prefix=/usr/local/node/0.10.24\nmake\nmake install\n```\n* 4、 配置NODE_HOME，进入profile编辑环境变量\n```javascript\nvim /etc/profile\n```\n设置nodejs环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:\n```javascript\n#set for nodejs\nexport NODE_HOME=/usr/local/node/0.10.24\nexport PATH=$NODE_HOME/bin:$PATH\n```\n:wq保存并退出，编译/etc/profile 使配置生效\n```javascript\nsource /etc/profile\n```\n验证是否安装配置成功\n```javascript\nnode -v\n```\n输出 v0.10.24 表示配置成功\nnpm模块安装路径\n```javascript\n/usr/local/node/0.10.24/lib/node_modules/\n```\n注：Nodejs 官网提供了编译好的Linux二进制包，你也可以下载下来直接应用。","tag_ids":[{"$oid":"595b2d928ae5840005b3377f"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:12:53.000Z"},"updated_at":{"$date":"2017-10-25T06:40:33.153Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf137"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"使用express创建Hello World","key_words":"express,node","description":"Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。\n使用 Express 可以快速地搭建一个完整功能的网站。","content":"###  框架核心特性：\n* 可以设置中间件来响应 HTTP 请求。\n* 定义了路由表用于执行不同的 HTTP 请求动作。\n* 可以通过向模板传递参数来动态渲染 HTML 页面。\n###  安装 Express\n安装 Express 并将其保存到依赖列表中：首先假定你已经安装了 Node.js，接下来为你的应用创建一个目录，然后进入此目录并将其作为当前工作目录。\n```javascript\n$ npm install express --save\n```\n### 创建一个Hello world\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\nvar server = app.listen(3000, function () {\n  var host = server.address().address;\n  var port = server.address().port;\n  console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n启动应用\n```javascript\nnode app.js\n```\n然后在浏览器中打开 http://localhost:3000/ 并查看输出结果。","tag_ids":[{"$oid":"595b328f8ae5840005b33783"},{"$oid":"595b2d928ae5840005b3377f"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:24:36.000Z"},"updated_at":{"$date":"2017-10-25T06:40:52.196Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf138"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"mongoDB操作——基本增删改查","key_words":"mongoDB操作——基本增删改查","description":"mongoDB所有的基本查询方式","content":"### 查询所有\n```javascript\ndb.collection.find(query, projection)\n```\n参数\n* query ：可选，使用查询操作符指定查询条件\n* projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n```javascript\ncollection.find()\n```\n只有一个条件\n```javascript\ncollection.find({\"name\":\"Alice\"})\n```\n根据两个及以上的条件查找:\u0026\u0026的关系\n```javascript\ncollection.find({\"name\":\"Alice\",\"age\":24})\n```\n根据条件查找（$lt:小于, $lte:小于等于,$gt:大于,$gte:大于等于,$ne:不等于）\n```javascript\ncollection.find({\"age\":{$lt:24}})\n```\n或关系查询\n```javascript\ncollection.find($or: [{\"name\":\"Alice\",\"age\":24}])\n```\n AND 和 OR 联合使用\n```javascript\ncollection.find({$or:[{\"name\":\"Alice\"},{\"age\":24}],\"id\":{$lt:50}})\n```\n### 插入数据\n```javascript\ncollection.insert({\"name\":\"Alice\",\"age\":24})\n```\n\n### 更新数据\n```javascript\ndb.collection.update(\n   \u003cquery\u003e,\n   \u003cupdate\u003e,\n   {\n     upsert: \u003cboolean\u003e,\n     multi: \u003cboolean\u003e,\n     writeConcern: \u003cdocument\u003e\n   }\n)\n```\n参数说明：\n* query : update的查询条件，类似sql update查询内where后面的。\n* update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n* upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n* multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n* writeConcern :可选，抛出异常的级别。\n\n只更新第一条记录：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }})\n```\n全部更新：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},false,true)\n```\n只添加第一条：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},true,false)\n```\n全部添加加进去:\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},true,true)\n```\n### 删除数据\n```javascript\ndb.collection.remove(\n   \u003cquery\u003e,\n   {\n     justOne: \u003cboolean\u003e,\n     writeConcern: \u003cdocument\u003e\n   }\n)\n```\n参数说明：\n* query :（可选）删除的文档的条件。\n* justOne : （可选）如果设为 true 或 1，则只删除一个文档。\n* writeConcern :\n\n### 分页查询\n```javascript\ndb.collection.find().limit(10).skip(10)\n```\n* limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。\n* skip方法同样接受一个数字参数作为跳过的记录条数。\n\n### 选择性显示字段\n```javascript\ndb.col.find({},{\"title\":1,_id:0}).limit(2)\n```\n### 排序\n*  1 为升序排列，而-1是用于降序排列\n\n```javascript\ndb.COLLECTION_NAME.find().sort({KEY:1})\n```\n### 聚合\n统计某字段值相同的数据\n* 将name字段相同的统计出来 \n\n```javascript\ncollection.aggregate([{$group : {_id : \"$name\", nameAll : {$sum : 1}}}])\n```\n\n","tag_ids":[{"$oid":"595b2d9c8ae5840005b33780"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-05T07:33:36.000Z"},"updated_at":{"$date":"2017-10-25T06:41:14.453Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf139"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Angular2使用第三方包","key_words":"第三方,Angular","description":"好多js的库很强大，但是没有es6这么方便，npm install也没有，这时候我们需要手动去绑定","content":"### 这里用的是angular-cli\nangular-cli.json\n```javascript\n\"scripts\": [\n         \"./assets/rgbaster.js\",\n         \"./assets/spark-md5.js\"\n      ]\n```\n```javascript\n\"styles\": [\n        \"styles.less\"\n      ]\n```\n然后在需要使用到插件的地方对对象进行实例化\n```javascript\ndeclare var RGBaster: any;\ndeclare var SparkMD5: any;\n```\n然后就可以直接调用啦\n```javascript\nRGBaster.colors(window.URL.createObjectURL(e.target.files[0]), {  \n      success: function (payload) {\n        // payload.dominant是主色，RGB形式表示\n        // payload.secondary是次色，RGB形式表示\n        // payload.palette是调色板，含多个主要颜色，数组\n    var rgb = payload.dominant.split(',');\n    var r = parseInt(rgb[0].split('(')[1]);\n    var g = parseInt(rgb[1]);\n    var b = parseInt(rgb[2].split(')')[0]);\n    var hex = \"#\" + ((1 \u003c\u003c 24) + (r \u003c\u003c 16) + (g \u003c\u003c 8) + b).toString(16).slice(1);\n        console.log(hex);\n      }\n    });\n```","tag_ids":[{"$oid":"595497139037a30005f7f7d4"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-06T03:56:55.000Z"},"updated_at":{"$date":"2017-10-25T06:39:17.511Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf13a"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Angular2对搜索引擎的优化","key_words":"Angular2,搜索引擎,Angular2 Meta","description":"单页面应用最怕的就是一个写死的标题，那么我们meta标签以及title进行优化","content":"### Angular2已经有了自已封装好的方法\n#### 修改title\n引入Title服务\n```javascript\nimport { Title } from '@angular/platform-browser';\n```\n注册title服务\n```javascript\nconstructor(private titleService: Title) {}\n```\n使用title\n```javascript\nthis.titleService.setTitle(\"自定义Title\");\n```\n#### 修改Meta\n引入Mate服务\n```javascript\nimport { Meta } from '@angular/platform-browser';\n```\n注册title服务\n```javascript\nconstructor(private meta: Meta) {}\n```\n使用title\n```javascript\nthis.meta.updateTag({ name: 'keywords', content: this.article.key_words });\nthis.meta.updateTag({ name: 'description', content: this.article.description });\n```\nMeta封装了很多方法，可以对Meta进行增删改查，但是单页面应用最好不要用新增，不然打开很多次路由之后，Meta对多到你害怕。具体的方法移步去官网看API","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-12T07:12:33.000Z"},"updated_at":{"$date":"2017-10-25T06:39:13.077Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf13b"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（一）：创建一个场景","key_words":"WebGL 小白教程（一）：创建一个场景","description":"webgl的时代已经到来，创建一个场","content":"首先，在我们用JS创建Webgl项目的时候需要知道一个第三方库——three.js,他封装了很多WebGL底层的东西，让你上手更加容易和方便，在我们开发的时候建议使用three.js本身而不要用它的压缩的min，方便调试~\n\n话不多说，首先准备一个three.js和一个jquery.js\n```html\n\u003cscript type=\"text/javascript\" src=\"js/three.js\" \u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"js/jquery-2.1.0.js\" \u003e\u003c/script\u003e\n```\n接下来，我们需要了\n\nPlane（平面） Cube（方块）Sphere(球体) Camera（相机） Axes(轴)\n\n其次，我们需要给自己灌输三个词，场景，相机，渲染器\n\n然后我们就可以开始进行第一个场景的创建,js\n```javascript\n$(function(){\n\u0009         // 创建一个场景\n        var scene = new THREE.Scene();\n\n        // 创建一个相机\n        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n        // 创建一个渲染器\n        var renderer = new THREE.WebGLRenderer();\n//      renderer.setClearColorHex();最新的版本已经没有这个方法了\n        renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        // 在场景上创建一个轴\n        var axes = new THREE.AxisHelper(20);\n        scene.add(axes);\n\n        // 创建一个平面几何\n        var planeGeometry = new THREE.PlaneGeometry(60, 20);\n        var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc});\n        var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n        //定义几何体的位置\n        plane.rotation.x = -0.5 * Math.PI;\n        plane.position.x = 15;\n        plane.position.y = 0;\n        plane.position.z = 0;\n        //将几何体添加至场景\n        scene.add(plane);\n\n        // 创建一个方块\n        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\n        var cubeMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: true});\n        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n        cube.position.x = -4;\n        cube.position.y = 3;\n        cube.position.z = 0;\n        scene.add(cube);\n\n        // 创建一个球体\n        var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\n        var sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff, wireframe: true});\n        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n        sphere.position.x = 20;\n        sphere.position.y = 4;\n        sphere.position.z = 2;\n        scene.add(sphere);\n\n        // 定义相机的位置\n        camera.position.x = -30;\n        camera.position.y = 40;\n        camera.position.z = 30;\n        camera.lookAt(scene.position);\n\n        $(\"#WebGL-output\").append(renderer.domElement);\n\n        // 渲染场景\n        renderer.render(scene, camera);\n})\n```\nindex.html\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u0009\u003chead\u003e\n\u0009\u0009\u003cmeta charset=\"utf-8\" /\u003e\n\u0009\u0009\u003ctitle\u003e\u003c/title\u003e\n\u0009\u0009\u003clink rel=\"stylesheet\" href=\"css/common.css\" /\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/three.js\" \u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/jquery-2.1.0.js\" \u003e\u003c/script\u003e\n\u0009\u003c/head\u003e\n\u0009\u003cbody\u003e\n\u0009\u0009\u003cdiv id=\"WebGL-output\"\u003e\n\u003c/div\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/lib/demo1.js\" \u003e\u003c/script\u003e\n\u0009\u003c/body\u003e\n\u003c/html\u003e\n\n```\n这样在运行的时候可以发现我们刚刚创建的几个几何体都在页面中展示了","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T06:46:58.000Z"},"updated_at":{"$date":"2017-10-25T06:39:06.350Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf13c"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（二）：初探灯光、材质","key_words":"WebGL,灯光,材质","description":"灯光和材质决定你看起来的视觉效果","content":"在第一篇文章中，我已经成功的让场景中有了几何体和坐标轴，但是看起来并不好看，这时候如果我们让几何体的材质变化一下，然后再来个灯光，看着会舒服很多~\n\n我们只需要将js更改一些，先将我们的材质全部从MeshBasicMaterial替换成MeshLambertMaterial，不然会没效果哦\n\n```javascript\nvar planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});\nvar cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});\nvar sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n\n```\n紧接着，我们将我们的灯光效果加上\n ```javascript\n        var sportLight=new THREE.SpotLight(0xffffff);\n        sportLight.position.set(-40,60,-10);\n        scene.add(sportLight);\n```\n这时候你会发现好看很多，但是我们需要看起来更加立体，所以需要为我们的物体们添加阴影\n\n```javascript\nsportLight.castShadow=true;\nsphere.castShadow=true;\ncube.castShadow=true;\nplane.receiveShadow=true;\nrenderer.shadowMapEnabled = true;\n```\n我们为我们","tag_ids":[],"tags":[],"cover":"","article_status":1,"created_at":{"$date":"2017-07-31T08:03:53.000Z"},"updated_at":{"$date":"2017-10-25T06:34:45.584Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf13d"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（三）：让场景动起来","key_words":"WebGL 小白教程（三）：让场景动起来","description":"让3D场景high起来~~","content":"\n\n废话不多说，直接上代码！\n```javascript\nfunction render(){\n\u0009\u0009if(cube.position.x \u003c -4){\n\u0009\u0009\u0009small=false;\n\u0009\u0009\u0009cube.position.x=-4;\n\u0009\u0009}else\u0009if(-3\u003c=cube.position.x||small){\n\u0009\u0009\u0009 small=true;\n\u0009\u0009\u0009 cube.position.x -=0.02;\n                         cube.position.y -=0.02;\n                         cube.position.z -=0.02;\n\u0009\u0009}else if(-3\u003ecube.position.x \u003e= -4){\n\u0009\u0009\u0009 cube.position.x +=0.02;\n                         cube.position.y +=0.02;\n                        cube.position.z +=0.02;\n\u0009\u0009}\n\u0009\u0009step+=0.04;\n\u0009\u0009sphere.position.x=20+(10*(Math.cos(step)));\n\u0009\u0009sphere.position.y=2+(10*(Math.abs(Math.sin(step))));\n\u0009requestAnimationFrame(render);\n\u0009renderer.render(scene, camera);\n}\n```\n对就是这么简单暴力的就可以让我们的场景动起来了，小球弹弹弹，方块儿弹弹弹~\n\nwebGL有个很好用的监听FPS的玩意儿，加一个又不会怎样，但是真的很方便拉~‘\n\n在我们的HTML加个可以容得下它的盒子咯\n```html\n\u003cscript type=\"text/javascript\" src=\"js/stats.js\" \u003e\u003c/script\u003e\n\u003cdiv id=\"Stats-output\"\u003e\u003c/div\u003e\n```\n然后我们将FPS创建放进去~\n```javascript\nfunction initStats(){\n\u0009var stats=new Stats();\n\u0009stats.setMode(0);\n\u0009stats.domElement.style.position='absolute';\n\u0009stats.domElement.style.left='0px';\n\u0009stats.domElement.style.top='0px';\n\u0009$(\"#Stats-output\").append(stats.domElement);\n\u0009return stats\n}\nvar stats =initStats();\nfunction render(){\n...\nstats.update();\n...\n}\n```\n这样我们就拥有了很小却很牛逼的FPS检测器，哈哈~\n\n到这里了，不得不说说Google团队弄出来的一个GUI，靠谱的一米，可以让你的界面中设置变量去设置速度啊啥的，不用自己再去写一大堆代码了！\n\n首先在html中引入插件gui\n```html\n\u003cscript type=\"text/javascript\" src=\"js/dat.gui.js\" \u003e\u003c/script\u003e\n```\n然后我们将gui实例化\n```javascript\n       var controls = new function () {\n            this.rotationSpeed = 0.02;\n            this.bouncingSpeed = 0.03;\n        };\n\n        var gui = new dat.GUI();\n        gui.add(controls, 'rotationSpeed', 0, 0.5);\n        gui.add(controls, 'bouncingSpeed', 0, 0.5);\n\n```\n接着，我们将我们的小方块儿和小球的数值改成变量\n```javascript\nfunction render(){\n\u0009\u0009if(cube.position.x \u003c -4){\n\u0009\u0009\u0009small=false;\n\u0009\u0009\u0009cube.position.x=-4;\n\u0009\u0009}else if(-3\u003c=cube.position.x||small){\n\u0009\u0009\u0009 small=true;\n\u0009\u0009\u0009 cube.position.x -=controls.rotationSpeed;\n                         cube.position.y -=controls.rotationSpeed;\n        cube.position.z-=controls.rotationSpeed;\n\u0009\u0009}else if(-3\u003ecube.position.x \u003e= -4){\n\u0009\u0009\u0009 cube.position.x +=controls.rotationSpeed;\n                         cube.position.y +=controls.rotationSpeed;\n                         cube.position.z +=controls.rotationSpeed;\n\u0009\u0009}\n\u0009\u0009step+=controls.bouncingSpeed;\n\u0009\u0009sphere.position.x=20+(10*(Math.cos(step)));\n\u0009\u0009sphere.position.y=2+(10*(Math.abs(Math.sin(step))));\n\u0009stats.update();\n\u0009requestAnimationFrame(render);\n\u0009renderer.render(scene, camera);\n}\n```\n好啦，这时候界面上出现了可以自己调节的框框~\n看起来已经开始专业了~\n\n题外话~\n\nAsciiEffect.js是一个拓展，可以让你的场景变成符号~，不要惊讶，虽然没什么卵用，但是可以玩一下。\n引入AsciiEffect\n```html\n\u003cscript type=\"text/javascript\" src=\"js/lib/AsciiEffect.js\" \u003e\u003c/script\u003e\n```\n\n```javascript\n//      $(\"#WebGL-output\").append(renderer.domElement);将这个替换下\n\u0009var effect = new THREE.AsciiEffect(renderer)\n\u0009effect.setSize(window.innerWidth, window.innerHeight);\n\u0009$(\"#WebGL-output\").append(effect.domElement);\n//     render中也替换一下下\n//\u0009renderer.render(scene, camera);\n\u0009effect.render(scene, camera);\n```\n就是这么轻松就完成了，然后如果你牛逼，你也可以自行拓展three.js~","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T08:54:28.000Z"},"updated_at":{"$date":"2017-10-25T06:38:58.619Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f03085cff8bc0001dbf13e"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（四）：在场景中动态新增对象","key_words":"WebGL 小白教程（四）：在场景中动态新增对象","description":"初始化的对象我们已经搞定了，那么在交互上面我们也要做些什么，让自己可以玩起来","content":"准备条件，和之前一样，场景，相机渲染器准备好了\n\n在这里我们的场景中的plane把它放大一点儿\n```javascript\nvar planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\n```\n这时候我们需要将GUI库引进来\n```html\n\u003cscript type=\"text/javascript\" src=\"js/dat.gui.js\" \u003e\u003c/script\u003e\n```\n创建一个gui\n```javascript\n  var controls = new function() {\n\u0009\u0009this.rotationSpeed = 0.02;\n\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009this.removeCube = function() {\n\u0009\u0009\u0009var allChildren = scene.children;\n\u0009\u0009\u0009var lastObject = allChildren[allChildren.length - 1];\n\u0009\u0009\u0009if(lastObject instanceof THREE.Mesh) {\n\u0009\u0009\u0009\u0009scene.remove(lastObject);\n\u0009\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009\u0009}\n\u0009\u0009};\n\n\u0009\u0009this.addCube = function() {\n\n\u0009\u0009\u0009var cubeSize = Math.ceil((Math.random() * 3));\n\u0009\u0009\u0009var cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\n\u0009\u0009\u0009var cubeMaterial = new THREE.MeshLambertMaterial({\n\u0009\u0009\u0009\u0009color: Math.random() * 0xffffff\n\u0009\u0009\u0009});\n\u0009\u0009\u0009var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n\u0009\u0009\u0009cube.castShadow = true;\n\u0009\u0009\u0009cube.name = \"cube-\" + scene.children.length;\n\n\u0009\u0009\u0009// position the cube randomly in the scene\n\n\u0009\u0009\u0009cube.position.x = -30 + Math.round((Math.random() * planeGeometry.parameters.width));\n\u0009\u0009\u0009cube.position.y = Math.round((Math.random() * 5));\n\u0009\u0009\u0009cube.position.z = -20 + Math.round((Math.random() * planeGeometry.parameters.height));\n\n\u0009\u0009\u0009// add the cube to the scene\n\u0009\u0009\u0009scene.add(cube);\n\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009};\n\n\u0009\u0009this.outputObjects = function() {\n\u0009\u0009\u0009console.log(scene.children);\n\u0009\u0009}\n\u0009};\n\n\u0009var gui = new dat.GUI();\n\u0009gui.add(controls, 'rotationSpeed', 0, 0.5);\n\u0009gui.add(controls, 'addCube');\n\u0009gui.add(controls, 'removeCube');\n\u0009gui.add(controls, 'outputObjects');\n\u0009gui.add(controls, 'numberOfObjects').listen();\n\n```\n这样，你就可以完全的随机添加小方块儿啦，来让我们给场景加点特效~\n```javascript\nscene.fog = new THREE.Fog(0xffffff, 0.001, 100);\n```\n100是距离，0.001是浓度\n\n附上完整demo4.js\n```javascript\nfunction initStats() {\n\u0009var stats = new Stats();\n\u0009stats.setMode(0);\n\u0009stats.domElement.style.position = 'absolute';\n\u0009stats.domElement.style.left = '0px';\n\u0009stats.domElement.style.top = '0px';\n\u0009$(\"#Stats-output\").append(stats.domElement);\n\u0009return stats\n}\n\n$(function() {\n\u0009var step = 0;\n\n\u0009function render() {\n\u0009\u0009scene.traverse(function(e) {\n\u0009\u0009\u0009if(e instanceof THREE.Mesh \u0026\u0026 e != plane) {\n\n\u0009\u0009\u0009\u0009e.rotation.x += controls.rotationSpeed;\n\u0009\u0009\u0009\u0009e.rotation.y += controls.rotationSpeed;\n\u0009\u0009\u0009\u0009e.rotation.z += controls.rotationSpeed;\n\u0009\u0009\u0009}\n\u0009\u0009});\n\u0009\u0009stats.update();\n\u0009\u0009requestAnimationFrame(render);\n\u0009\u0009renderer.render(scene, camera);\n\u0009}\n\u0009// 创建一个场景\n\u0009var scene = new THREE.Scene();\n\u0009scene.fog = new THREE.Fog(0xffffff, 0.001, 100);\n//\u0009scene.overrideMaterial = new THREE.MeshLambertMaterial({\n//\u0009\u0009color: 0xffffff\n//\u0009});\n\u0009// 创建一个相机\n\u0009var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n\u0009// 创建一个渲染器\n\u0009var renderer = new THREE.WebGLRenderer();\n\u0009renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));\n\u0009renderer.setSize(window.innerWidth, window.innerHeight);\n\u0009renderer.shadowMapEnabled = true;\n\u0009// 在场景上创建一个轴\n\u0009var axes = new THREE.AxisHelper(20);\n\u0009scene.add(axes);\n\n\u0009//创建一个FPS\n\u0009var stats = initStats();\n\u0009//创建一个gui\n\u0009var controls = new function() {\n\u0009\u0009this.rotationSpeed = 0.02;\n\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009this.removeCube = function() {\n\u0009\u0009\u0009var allChildren = scene.children;\n\u0009\u0009\u0009var lastObject = allChildren[allChildren.length - 1];\n\u0009\u0009\u0009if(lastObject instanceof THREE.Mesh) {\n\u0009\u0009\u0009\u0009scene.remove(lastObject);\n\u0009\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009\u0009}\n\u0009\u0009};\n\n\u0009\u0009this.addCube = function() {\n\n\u0009\u0009\u0009var cubeSize = Math.ceil((Math.random() * 3));\n\u0009\u0009\u0009var cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\n\u0009\u0009\u0009var cubeMaterial = new THREE.MeshLambertMaterial({\n\u0009\u0009\u0009\u0009color: Math.random() * 0xffffff\n\u0009\u0009\u0009});\n\u0009\u0009\u0009var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n\u0009\u0009\u0009cube.castShadow = true;\n\u0009\u0009\u0009cube.name = \"cube-\" + scene.children.length;\n\n\u0009\u0009\u0009// position the cube randomly in the scene\n\n\u0009\u0009\u0009cube.position.x = -30 + Math.round((Math.random() * planeGeometry.parameters.width));\n\u0009\u0009\u0009cube.position.y = Math.round((Math.random() * 5));\n\u0009\u0009\u0009cube.position.z = -20 + Math.round((Math.random() * planeGeometry.parameters.height));\n\n\u0009\u0009\u0009// add the cube to the scene\n\u0009\u0009\u0009scene.add(cube);\n\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009};\n\n\u0009\u0009this.outputObjects = function() {\n\u0009\u0009\u0009console.log(scene.children);\n\u0009\u0009}\n\u0009};\n\n\u0009var gui = new dat.GUI();\n\u0009gui.add(controls, 'rotationSpeed', 0, 0.5);\n\u0009gui.add(controls, 'addCube');\n\u0009gui.add(controls, 'removeCube');\n\u0009gui.add(controls, 'outputObjects');\n\u0009gui.add(controls, 'numberOfObjects').listen();\n\u0009// 创建一个平面几何\n\u0009var planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\n\u0009var planeMaterial = new THREE.MeshLambertMaterial({\n\u0009\u0009color: 0xffffff\n\u0009});\n\u0009var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\u0009//定义几何体的位置\n\u0009plane.rotation.x = -0.5 * Math.PI;\n\u0009plane.position.x = 0;\n\u0009plane.position.y = 0;\n\u0009plane.position.z = 0;\n\n\u0009//\u0009plane.receiveShadow = true;\n\u0009//将几何体添加至场景\n\u0009scene.add(plane);\n\u0009var ambientLight = new THREE.AmbientLight(0x0c0c0c);\n\u0009scene.add(ambientLight);\n\u0009var sportLight = new THREE.SpotLight(0xffffff);\n\u0009sportLight.position.set(-40, 60, -10);\n\u0009sportLight.castShadow = true;\n\u0009scene.add(sportLight);\n\u0009\n\u0009// 定义相机的位置\n\u0009camera.position.x = -30;\n\u0009camera.position.y = 40;\n\u0009camera.position.z = 30;\n\u0009camera.lookAt(scene.position);\n\n\u0009$(\"#WebGL-output\").append(renderer.domElement);\n\u0009render();\n\n\u0009function onResize() {\n\u0009\u0009camera.aspect = window.innerWidth / window.innerHeight;\n\u0009\u0009camera.updateProjectionMatrix();\n\u0009\u0009renderer.setSize(window.innerWidth, window.innerHeight);\n\n\u0009}\n\n\u0009// listen to the resize events\n\u0009window.addEventListener('resize', onResize, false);\n})\n```\ndemo4.html\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\n\u0009\u003chead\u003e\n\u0009\u0009\u003cmeta charset=\"utf-8\" /\u003e\n\u0009\u0009\u003ctitle\u003e\u003c/title\u003e\n\u0009\u0009\u003clink rel=\"stylesheet\" href=\"css/common.css\" /\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/three.js\"\u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/stats.js\"\u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/dat.gui.js\"\u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/jquery-2.1.0.js\"\u003e\u003c/script\u003e\n\u0009\u003c/head\u003e\n\n\u0009\u003cbody\u003e\n\u0009\u0009\u003cdiv id=\"WebGL-output\"\u003e\n\u0009\u0009\u003c/div\u003e\n\u0009\u0009\u003cdiv id=\"Stats-output\"\u003e\u003c/div\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/lib/demo4.js\"\u003e\u003c/script\u003e\n\u0009\u003c/body\u003e\n\n\u003c/html\u003e\n```","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-08-01T02:28:51.000Z"},"updated_at":{"$date":"2017-10-25T06:38:51.639Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a3cff8bc0001dbf13f"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"nodejs链接mongodb","key_words":"nodejs,mongodb","description":"MongoDB是一种文档导向数据库管理系统，由C++撰写而成。nodejs和数据库的mongodb的链接","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:09:13.000Z"},"updated_at":{"$date":"2017-10-25T06:35:15.767Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a3cff8bc0001dbf140"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Vue-cli初探(一)之创建一个项目（小白教程）","key_words":"Vue-cli初探(一)之创建一个项目（小白教程）","description":"7kb min+gzip 运行 DOM ，最省心的优化，这些足以让你暂且放下angular和react来试试","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-05-30T02:39:37.000Z"},"updated_at":{"$date":"2017-10-25T06:35:15.767Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a3cff8bc0001dbf141"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Vue2使用 vue-router 跳转页面","key_words":"路由,Vue","description":"单页面应用需要通过路由跳转页面","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-03T02:20:56.114Z"},"updated_at":{"$date":"2017-10-25T06:35:15.767Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a3cff8bc0001dbf142"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Vue2组件之间的数据传递","key_words":"Vue2,组件","description":"Vue2中组件化的开发让项目变得非常便于管理，那么组件之间的数据传递是必","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-03T02:06:48.205Z"},"updated_at":{"$date":"2017-10-25T06:35:15.767Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a3cff8bc0001dbf143"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"详解vuex+axios实践","key_words":"vuex,vue","description":"根据 Vuex 文档中的描述，Vuex 是适用于 Vue.js 应用的状态管理库，为应用中的","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-06-30T15:03:30.698Z"},"updated_at":{"$date":"2017-10-25T06:35:15.767Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf144"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（四）：在场景中动态新增对象","key_words":"WebGL 小白教程（四）：在场景中动态新增对象","description":"初始化的对象我们已经搞定了，那么在交互上面我们也要做些什么，让自己可以玩起来","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-08-01T02:28:51.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf145"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（三）：让场景动起来","key_words":"WebGL 小白教程（三）：让场景动起来","description":"让3D场景high起来~~","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T08:54:28.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf146"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（二）：初探灯光、材质","key_words":"WebGL,灯光,材质","description":"灯光和材质决定你看起来的视觉效果","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T08:03:53.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf147"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（一）：创建一个场景","key_words":"WebGL 小白教程（一）：创建一个场景","description":"webgl的时代已经到来，创建一个场","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T06:46:58.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf148"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"MAC升级Nodejs","key_words":"MAC升级Nodejs","description":"MAC升级Nodejs，低版本的node很多东西不支持，官网下载的版本有很低，只能通过","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-06-24T07:51:58.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf149"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Angular2对搜索引擎的优化","key_words":"Angular2,搜索引擎,Angular2 Meta","description":"单页面应用最怕的就是一个写死的标题，那么我们meta标签以及title进行优化","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-12T07:12:33.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf14a"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"mongoDB操作——基本增删改查","key_words":"mongoDB操作——基本增删改查","description":"mongoDB所有的基本查询方式","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-05T07:33:36.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf14b"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Angular2使用第三方包","key_words":"第三方,Angular","description":"好多js的库很强大，但是没有es6这么方便，npm install也没有，这时候我们需要手动去绑定","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-06T03:56:55.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf14c"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"nodejs环境配置","key_words":"node","description":"mac上面的环境配置","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:12:53.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030a9cff8bc0001dbf14d"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"使用express创建Hello World","key_words":"express,node","description":"Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。\n使用 Express 可以快速地搭建一个完整功能的网站。","content":"","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:24:36.000Z"},"updated_at":{"$date":"2017-10-25T06:35:21.878Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf14e"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"nodejs链接mongodb","key_words":"nodejs,mongodb","description":"MongoDB是一种文档导向数据库管理系统，由C++撰写而成。nodejs和数据库的mongodb的链接","content":"### 一、安装驱动\n```javascript\nnpm install mongodb\n```\n### 二、数据库操作\n与 MySQL 不同的是 MongoDB 会自动创建数据库和集合，所以使用前我们不需要手动去创建。\u003c/br\u003e\n连接数据库\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\n//var DB_CONN_STR = 'mongodb://localhost:27017/berk';\n//如果是有权限的在地址后面一定要加参数authSource=admin\nvar DB_CONN_STR = 'mongodb://Jermine:123456@192.168.0.30:27017/berk?authSource=admin';\n```\n插入数据\n```javascript\nvar insertData = function(db, callback) {  \n    //连接到表 user\n    var collection = db.collection('user');\n   //插入数据\n    var data = [{\"name\":\"Alice\",\"age\":\"24\"},{\"name\":\"Jermine\",\"age\":\"27\"}];\n    collection.insert(data, function(err, result) { \n        if(err)\n        {\n            console.log('Error:'+ err);\n            return;\n        }     \n        callback(result);\n    });\n}\n  MongoClient.connect(DB_CONN_STR, function(err, db) {\n    console.log(\"连接成功！\");\n    insertData(db, function(result) {\n        console.log(result);\n        db.close();\n    });\n});\n```\n查询数据\n```javascript\nvar insertData = function(db, callback) {  \n     var collection = db.collection('user');\n     var whereStr = {\"name\":'Alice'};\n    collection.find(whereStr).toArray(function(err, result) {\n    if(err)\n    {\n      console.log('Error:'+ err);\n      return;\n    }     \n    callback(result);\n  });\n}\n\n  MongoClient.connect(DB_CONN_STR, function(err, db) {\n    console.log(\"连接成功！\");\n    insertData(db, function(result) {\n        console.log(result);\n        db.close();\n    });\n});\n\n```\n更新数据\n```javascript\nvar updateData = function(db, callback) {  \n    //连接到表  \n    var collection = db.collection('user');\n    //更新数据\n    var whereStr = {\"name\":'Alice'};\n    var updateStr = {$set: { \"age\" : \"20\" }};\n    collection.update(whereStr,updateStr, function(err, result) {\n        if(err)\n        {\n            console.log('Error:'+ err);\n            return;\n        }     \n        callback(result);\n    });\n}\n```\n删除数据\n```javascript\nvar delData = function(db, callback) {  \n  //连接到表  \n  var collection = db.collection('user');\n  //删除数据\n  var whereStr = {\"name\":'Alice'};\n  collection.remove(whereStr, function(err, result) {\n    if(err)\n    {\n      console.log('Error:'+ err);\n      return;\n    }     \n    callback(result);\n  });\n}\n```","tag_ids":[{"$oid":"595b2d928ae5840005b3377f"},{"$oid":"595b2d9c8ae5840005b33780"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:09:13.000Z"},"updated_at":{"$date":"2017-10-25T06:40:31.291Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf14f"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"nodejs环境配置","key_words":"node","description":"mac上面的环境配置","content":"### 一、CentOS 下安装 Node.js\n目前只试过mac上的安装，后面会更新windows平台的安装\n* 1、下载源码，你需要在https://nodejs.org/en/download/下载最新的Nodejs版本\n```javascript\ncd /usr/local/src/\nwget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz\n```\n* 2、解压源码\n```javascript\ntar zxvf node-v0.10.24.tar.gz\n```\n* 3、 编译安装\n```javascript\ncd node-v0.10.24\n./configure --prefix=/usr/local/node/0.10.24\nmake\nmake install\n```\n* 4、 配置NODE_HOME，进入profile编辑环境变量\n```javascript\nvim /etc/profile\n```\n设置nodejs环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容:\n```javascript\n#set for nodejs\nexport NODE_HOME=/usr/local/node/0.10.24\nexport PATH=$NODE_HOME/bin:$PATH\n```\n:wq保存并退出，编译/etc/profile 使配置生效\n```javascript\nsource /etc/profile\n```\n验证是否安装配置成功\n```javascript\nnode -v\n```\n输出 v0.10.24 表示配置成功\nnpm模块安装路径\n```javascript\n/usr/local/node/0.10.24/lib/node_modules/\n```\n注：Nodejs 官网提供了编译好的Linux二进制包，你也可以下载下来直接应用。","tag_ids":[{"$oid":"595b2d928ae5840005b3377f"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:12:53.000Z"},"updated_at":{"$date":"2017-10-25T06:40:58.517Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf150"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"使用express创建Hello World","key_words":"express,node","description":"Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。\n使用 Express 可以快速地搭建一个完整功能的网站。","content":"###  框架核心特性：\n* 可以设置中间件来响应 HTTP 请求。\n* 定义了路由表用于执行不同的 HTTP 请求动作。\n* 可以通过向模板传递参数来动态渲染 HTML 页面。\n###  安装 Express\n安装 Express 并将其保存到依赖列表中：首先假定你已经安装了 Node.js，接下来为你的应用创建一个目录，然后进入此目录并将其作为当前工作目录。\n```javascript\n$ npm install express --save\n```\n### 创建一个Hello world\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\nvar server = app.listen(3000, function () {\n  var host = server.address().address;\n  var port = server.address().port;\n  console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n启动应用\n```javascript\nnode app.js\n```\n然后在浏览器中打开 http://localhost:3000/ 并查看输出结果。","tag_ids":[{"$oid":"595b328f8ae5840005b33783"},{"$oid":"595b2d928ae5840005b3377f"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-04T06:24:36.000Z"},"updated_at":{"$date":"2017-10-25T06:40:55.036Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf151"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"mongoDB操作——基本增删改查","key_words":"mongoDB操作——基本增删改查","description":"mongoDB所有的基本查询方式","content":"### 查询所有\n```javascript\ndb.collection.find(query, projection)\n```\n参数\n* query ：可选，使用查询操作符指定查询条件\n* projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n```javascript\ncollection.find()\n```\n只有一个条件\n```javascript\ncollection.find({\"name\":\"Alice\"})\n```\n根据两个及以上的条件查找:\u0026\u0026的关系\n```javascript\ncollection.find({\"name\":\"Alice\",\"age\":24})\n```\n根据条件查找（$lt:小于, $lte:小于等于,$gt:大于,$gte:大于等于,$ne:不等于）\n```javascript\ncollection.find({\"age\":{$lt:24}})\n```\n或关系查询\n```javascript\ncollection.find($or: [{\"name\":\"Alice\",\"age\":24}])\n```\n AND 和 OR 联合使用\n```javascript\ncollection.find({$or:[{\"name\":\"Alice\"},{\"age\":24}],\"id\":{$lt:50}})\n```\n### 插入数据\n```javascript\ncollection.insert({\"name\":\"Alice\",\"age\":24})\n```\n\n### 更新数据\n```javascript\ndb.collection.update(\n   \u003cquery\u003e,\n   \u003cupdate\u003e,\n   {\n     upsert: \u003cboolean\u003e,\n     multi: \u003cboolean\u003e,\n     writeConcern: \u003cdocument\u003e\n   }\n)\n```\n参数说明：\n* query : update的查询条件，类似sql update查询内where后面的。\n* update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的\n* upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n* multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n* writeConcern :可选，抛出异常的级别。\n\n只更新第一条记录：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }})\n```\n全部更新：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},false,true)\n```\n只添加第一条：\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},true,false)\n```\n全部添加加进去:\n```javascript\ncollection.update({\"name\":'Alice'},{$set: { \"age\" : data.age }},true,true)\n```\n### 删除数据\n```javascript\ndb.collection.remove(\n   \u003cquery\u003e,\n   {\n     justOne: \u003cboolean\u003e,\n     writeConcern: \u003cdocument\u003e\n   }\n)\n```\n参数说明：\n* query :（可选）删除的文档的条件。\n* justOne : （可选）如果设为 true 或 1，则只删除一个文档。\n* writeConcern :\n\n### 分页查询\n```javascript\ndb.collection.find().limit(10).skip(10)\n```\n* limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。\n* skip方法同样接受一个数字参数作为跳过的记录条数。\n\n### 选择性显示字段\n```javascript\ndb.col.find({},{\"title\":1,_id:0}).limit(2)\n```\n### 排序\n*  1 为升序排列，而-1是用于降序排列\n\n```javascript\ndb.COLLECTION_NAME.find().sort({KEY:1})\n```\n### 聚合\n统计某字段值相同的数据\n* 将name字段相同的统计出来 \n\n```javascript\ncollection.aggregate([{$group : {_id : \"$name\", nameAll : {$sum : 1}}}])\n```\n\n","tag_ids":[{"$oid":"595b2d9c8ae5840005b33780"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-05T07:33:36.000Z"},"updated_at":{"$date":"2017-10-25T06:40:50.110Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf152"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Angular2使用第三方包","key_words":"第三方,Angular","description":"好多js的库很强大，但是没有es6这么方便，npm install也没有，这时候我们需要手动去绑定","content":"### 这里用的是angular-cli\nangular-cli.json\n```javascript\n\"scripts\": [\n         \"./assets/rgbaster.js\",\n         \"./assets/spark-md5.js\"\n      ]\n```\n```javascript\n\"styles\": [\n        \"styles.less\"\n      ]\n```\n然后在需要使用到插件的地方对对象进行实例化\n```javascript\ndeclare var RGBaster: any;\ndeclare var SparkMD5: any;\n```\n然后就可以直接调用啦\n```javascript\nRGBaster.colors(window.URL.createObjectURL(e.target.files[0]), {  \n      success: function (payload) {\n        // payload.dominant是主色，RGB形式表示\n        // payload.secondary是次色，RGB形式表示\n        // payload.palette是调色板，含多个主要颜色，数组\n    var rgb = payload.dominant.split(',');\n    var r = parseInt(rgb[0].split('(')[1]);\n    var g = parseInt(rgb[1]);\n    var b = parseInt(rgb[2].split(')')[0]);\n    var hex = \"#\" + ((1 \u003c\u003c 24) + (r \u003c\u003c 16) + (g \u003c\u003c 8) + b).toString(16).slice(1);\n        console.log(hex);\n      }\n    });\n```","tag_ids":[{"$oid":"595497139037a30005f7f7d4"}],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-06T03:56:55.000Z"},"updated_at":{"$date":"2017-10-25T06:41:12.221Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf153"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"Angular2对搜索引擎的优化","key_words":"Angular2,搜索引擎,Angular2 Meta","description":"单页面应用最怕的就是一个写死的标题，那么我们meta标签以及title进行优化","content":"### Angular2已经有了自已封装好的方法\n#### 修改title\n引入Title服务\n```javascript\nimport { Title } from '@angular/platform-browser';\n```\n注册title服务\n```javascript\nconstructor(private titleService: Title) {}\n```\n使用title\n```javascript\nthis.titleService.setTitle(\"自定义Title\");\n```\n#### 修改Meta\n引入Mate服务\n```javascript\nimport { Meta } from '@angular/platform-browser';\n```\n注册title服务\n```javascript\nconstructor(private meta: Meta) {}\n```\n使用title\n```javascript\nthis.meta.updateTag({ name: 'keywords', content: this.article.key_words });\nthis.meta.updateTag({ name: 'description', content: this.article.description });\n```\nMeta封装了很多方法，可以对Meta进行增删改查，但是单页面应用最好不要用新增，不然打开很多次路由之后，Meta对多到你害怕。具体的方法移步去官网看API","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-12T07:12:33.000Z"},"updated_at":{"$date":"2017-10-25T06:39:15.360Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf154"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（一）：创建一个场景","key_words":"WebGL 小白教程（一）：创建一个场景","description":"webgl的时代已经到来，创建一个场","content":"首先，在我们用JS创建Webgl项目的时候需要知道一个第三方库——three.js,他封装了很多WebGL底层的东西，让你上手更加容易和方便，在我们开发的时候建议使用three.js本身而不要用它的压缩的min，方便调试~\n\n话不多说，首先准备一个three.js和一个jquery.js\n```html\n\u003cscript type=\"text/javascript\" src=\"js/three.js\" \u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"js/jquery-2.1.0.js\" \u003e\u003c/script\u003e\n```\n接下来，我们需要了\n\nPlane（平面） Cube（方块）Sphere(球体) Camera（相机） Axes(轴)\n\n其次，我们需要给自己灌输三个词，场景，相机，渲染器\n\n然后我们就可以开始进行第一个场景的创建,js\n```javascript\n$(function(){\n\u0009         // 创建一个场景\n        var scene = new THREE.Scene();\n\n        // 创建一个相机\n        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n        // 创建一个渲染器\n        var renderer = new THREE.WebGLRenderer();\n//      renderer.setClearColorHex();最新的版本已经没有这个方法了\n        renderer.setClearColor(new THREE.Color(0xEEEEEE));\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        // 在场景上创建一个轴\n        var axes = new THREE.AxisHelper(20);\n        scene.add(axes);\n\n        // 创建一个平面几何\n        var planeGeometry = new THREE.PlaneGeometry(60, 20);\n        var planeMaterial = new THREE.MeshBasicMaterial({color: 0xcccccc});\n        var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n        //定义几何体的位置\n        plane.rotation.x = -0.5 * Math.PI;\n        plane.position.x = 15;\n        plane.position.y = 0;\n        plane.position.z = 0;\n        //将几何体添加至场景\n        scene.add(plane);\n\n        // 创建一个方块\n        var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\n        var cubeMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: true});\n        var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n        cube.position.x = -4;\n        cube.position.y = 3;\n        cube.position.z = 0;\n        scene.add(cube);\n\n        // 创建一个球体\n        var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\n        var sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff, wireframe: true});\n        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n        sphere.position.x = 20;\n        sphere.position.y = 4;\n        sphere.position.z = 2;\n        scene.add(sphere);\n\n        // 定义相机的位置\n        camera.position.x = -30;\n        camera.position.y = 40;\n        camera.position.z = 30;\n        camera.lookAt(scene.position);\n\n        $(\"#WebGL-output\").append(renderer.domElement);\n\n        // 渲染场景\n        renderer.render(scene, camera);\n})\n```\nindex.html\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u0009\u003chead\u003e\n\u0009\u0009\u003cmeta charset=\"utf-8\" /\u003e\n\u0009\u0009\u003ctitle\u003e\u003c/title\u003e\n\u0009\u0009\u003clink rel=\"stylesheet\" href=\"css/common.css\" /\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/three.js\" \u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/jquery-2.1.0.js\" \u003e\u003c/script\u003e\n\u0009\u003c/head\u003e\n\u0009\u003cbody\u003e\n\u0009\u0009\u003cdiv id=\"WebGL-output\"\u003e\n\u003c/div\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/lib/demo1.js\" \u003e\u003c/script\u003e\n\u0009\u003c/body\u003e\n\u003c/html\u003e\n\n```\n这样在运行的时候可以发现我们刚刚创建的几个几何体都在页面中展示了","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T06:46:58.000Z"},"updated_at":{"$date":"2017-10-25T06:39:11.701Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf155"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（二）：初探灯光、材质","key_words":"WebGL,灯光,材质","description":"灯光和材质决定你看起来的视觉效果","content":"在第一篇文章中，我已经成功的让场景中有了几何体和坐标轴，但是看起来并不好看，这时候如果我们让几何体的材质变化一下，然后再来个灯光，看着会舒服很多~\n\n我们只需要将js更改一些，先将我们的材质全部从MeshBasicMaterial替换成MeshLambertMaterial，不然会没效果哦\n\n```javascript\nvar planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});\nvar cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff0000});\nvar sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n\n```\n紧接着，我们将我们的灯光效果加上\n ```javascript\n        var sportLight=new THREE.SpotLight(0xffffff);\n        sportLight.position.set(-40,60,-10);\n        scene.add(sportLight);\n```\n这时候你会发现好看很多，但是我们需要看起来更加立体，所以需要为我们的物体们添加阴影\n\n```javascript\nsportLight.castShadow=true;\nsphere.castShadow=true;\ncube.castShadow=true;\nplane.receiveShadow=true;\nrenderer.shadowMapEnabled = true;\n```\n我们为我们","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T08:03:53.000Z"},"updated_at":{"$date":"2017-10-25T06:39:03.472Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf156"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（三）：让场景动起来","key_words":"WebGL 小白教程（三）：让场景动起来","description":"让3D场景high起来~~","content":"\n\n废话不多说，直接上代码！\n```javascript\nfunction render(){\n\u0009\u0009if(cube.position.x \u003c -4){\n\u0009\u0009\u0009small=false;\n\u0009\u0009\u0009cube.position.x=-4;\n\u0009\u0009}else\u0009if(-3\u003c=cube.position.x||small){\n\u0009\u0009\u0009 small=true;\n\u0009\u0009\u0009 cube.position.x -=0.02;\n                         cube.position.y -=0.02;\n                         cube.position.z -=0.02;\n\u0009\u0009}else if(-3\u003ecube.position.x \u003e= -4){\n\u0009\u0009\u0009 cube.position.x +=0.02;\n                         cube.position.y +=0.02;\n                        cube.position.z +=0.02;\n\u0009\u0009}\n\u0009\u0009step+=0.04;\n\u0009\u0009sphere.position.x=20+(10*(Math.cos(step)));\n\u0009\u0009sphere.position.y=2+(10*(Math.abs(Math.sin(step))));\n\u0009requestAnimationFrame(render);\n\u0009renderer.render(scene, camera);\n}\n```\n对就是这么简单暴力的就可以让我们的场景动起来了，小球弹弹弹，方块儿弹弹弹~\n\nwebGL有个很好用的监听FPS的玩意儿，加一个又不会怎样，但是真的很方便拉~‘\n\n在我们的HTML加个可以容得下它的盒子咯\n```html\n\u003cscript type=\"text/javascript\" src=\"js/stats.js\" \u003e\u003c/script\u003e\n\u003cdiv id=\"Stats-output\"\u003e\u003c/div\u003e\n```\n然后我们将FPS创建放进去~\n```javascript\nfunction initStats(){\n\u0009var stats=new Stats();\n\u0009stats.setMode(0);\n\u0009stats.domElement.style.position='absolute';\n\u0009stats.domElement.style.left='0px';\n\u0009stats.domElement.style.top='0px';\n\u0009$(\"#Stats-output\").append(stats.domElement);\n\u0009return stats\n}\nvar stats =initStats();\nfunction render(){\n...\nstats.update();\n...\n}\n```\n这样我们就拥有了很小却很牛逼的FPS检测器，哈哈~\n\n到这里了，不得不说说Google团队弄出来的一个GUI，靠谱的一米，可以让你的界面中设置变量去设置速度啊啥的，不用自己再去写一大堆代码了！\n\n首先在html中引入插件gui\n```html\n\u003cscript type=\"text/javascript\" src=\"js/dat.gui.js\" \u003e\u003c/script\u003e\n```\n然后我们将gui实例化\n```javascript\n       var controls = new function () {\n            this.rotationSpeed = 0.02;\n            this.bouncingSpeed = 0.03;\n        };\n\n        var gui = new dat.GUI();\n        gui.add(controls, 'rotationSpeed', 0, 0.5);\n        gui.add(controls, 'bouncingSpeed', 0, 0.5);\n\n```\n接着，我们将我们的小方块儿和小球的数值改成变量\n```javascript\nfunction render(){\n\u0009\u0009if(cube.position.x \u003c -4){\n\u0009\u0009\u0009small=false;\n\u0009\u0009\u0009cube.position.x=-4;\n\u0009\u0009}else if(-3\u003c=cube.position.x||small){\n\u0009\u0009\u0009 small=true;\n\u0009\u0009\u0009 cube.position.x -=controls.rotationSpeed;\n                         cube.position.y -=controls.rotationSpeed;\n        cube.position.z-=controls.rotationSpeed;\n\u0009\u0009}else if(-3\u003ecube.position.x \u003e= -4){\n\u0009\u0009\u0009 cube.position.x +=controls.rotationSpeed;\n                         cube.position.y +=controls.rotationSpeed;\n                         cube.position.z +=controls.rotationSpeed;\n\u0009\u0009}\n\u0009\u0009step+=controls.bouncingSpeed;\n\u0009\u0009sphere.position.x=20+(10*(Math.cos(step)));\n\u0009\u0009sphere.position.y=2+(10*(Math.abs(Math.sin(step))));\n\u0009stats.update();\n\u0009requestAnimationFrame(render);\n\u0009renderer.render(scene, camera);\n}\n```\n好啦，这时候界面上出现了可以自己调节的框框~\n看起来已经开始专业了~\n\n题外话~\n\nAsciiEffect.js是一个拓展，可以让你的场景变成符号~，不要惊讶，虽然没什么卵用，但是可以玩一下。\n引入AsciiEffect\n```html\n\u003cscript type=\"text/javascript\" src=\"js/lib/AsciiEffect.js\" \u003e\u003c/script\u003e\n```\n\n```javascript\n//      $(\"#WebGL-output\").append(renderer.domElement);将这个替换下\n\u0009var effect = new THREE.AsciiEffect(renderer)\n\u0009effect.setSize(window.innerWidth, window.innerHeight);\n\u0009$(\"#WebGL-output\").append(effect.domElement);\n//     render中也替换一下下\n//\u0009renderer.render(scene, camera);\n\u0009effect.render(scene, camera);\n```\n就是这么轻松就完成了，然后如果你牛逼，你也可以自行拓展three.js~","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-07-31T08:54:28.000Z"},"updated_at":{"$date":"2017-10-25T06:39:00.657Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}
{"_id":{"$oid":"59f030f5cff8bc0001dbf157"},"user_id":{"$oid":"594b37ee931e2700057d6719"},"title":"WebGL 小白教程（四）：在场景中动态新增对象","key_words":"WebGL 小白教程（四）：在场景中动态新增对象","description":"初始化的对象我们已经搞定了，那么在交互上面我们也要做些什么，让自己可以玩起来","content":"准备条件，和之前一样，场景，相机渲染器准备好了\n\n在这里我们的场景中的plane把它放大一点儿\n```javascript\nvar planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\n```\n这时候我们需要将GUI库引进来\n```html\n\u003cscript type=\"text/javascript\" src=\"js/dat.gui.js\" \u003e\u003c/script\u003e\n```\n创建一个gui\n```javascript\n  var controls = new function() {\n\u0009\u0009this.rotationSpeed = 0.02;\n\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009this.removeCube = function() {\n\u0009\u0009\u0009var allChildren = scene.children;\n\u0009\u0009\u0009var lastObject = allChildren[allChildren.length - 1];\n\u0009\u0009\u0009if(lastObject instanceof THREE.Mesh) {\n\u0009\u0009\u0009\u0009scene.remove(lastObject);\n\u0009\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009\u0009}\n\u0009\u0009};\n\n\u0009\u0009this.addCube = function() {\n\n\u0009\u0009\u0009var cubeSize = Math.ceil((Math.random() * 3));\n\u0009\u0009\u0009var cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\n\u0009\u0009\u0009var cubeMaterial = new THREE.MeshLambertMaterial({\n\u0009\u0009\u0009\u0009color: Math.random() * 0xffffff\n\u0009\u0009\u0009});\n\u0009\u0009\u0009var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n\u0009\u0009\u0009cube.castShadow = true;\n\u0009\u0009\u0009cube.name = \"cube-\" + scene.children.length;\n\n\u0009\u0009\u0009// position the cube randomly in the scene\n\n\u0009\u0009\u0009cube.position.x = -30 + Math.round((Math.random() * planeGeometry.parameters.width));\n\u0009\u0009\u0009cube.position.y = Math.round((Math.random() * 5));\n\u0009\u0009\u0009cube.position.z = -20 + Math.round((Math.random() * planeGeometry.parameters.height));\n\n\u0009\u0009\u0009// add the cube to the scene\n\u0009\u0009\u0009scene.add(cube);\n\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009};\n\n\u0009\u0009this.outputObjects = function() {\n\u0009\u0009\u0009console.log(scene.children);\n\u0009\u0009}\n\u0009};\n\n\u0009var gui = new dat.GUI();\n\u0009gui.add(controls, 'rotationSpeed', 0, 0.5);\n\u0009gui.add(controls, 'addCube');\n\u0009gui.add(controls, 'removeCube');\n\u0009gui.add(controls, 'outputObjects');\n\u0009gui.add(controls, 'numberOfObjects').listen();\n\n```\n这样，你就可以完全的随机添加小方块儿啦，来让我们给场景加点特效~\n```javascript\nscene.fog = new THREE.Fog(0xffffff, 0.001, 100);\n```\n100是距离，0.001是浓度\n\n附上完整demo4.js\n```javascript\nfunction initStats() {\n\u0009var stats = new Stats();\n\u0009stats.setMode(0);\n\u0009stats.domElement.style.position = 'absolute';\n\u0009stats.domElement.style.left = '0px';\n\u0009stats.domElement.style.top = '0px';\n\u0009$(\"#Stats-output\").append(stats.domElement);\n\u0009return stats\n}\n\n$(function() {\n\u0009var step = 0;\n\n\u0009function render() {\n\u0009\u0009scene.traverse(function(e) {\n\u0009\u0009\u0009if(e instanceof THREE.Mesh \u0026\u0026 e != plane) {\n\n\u0009\u0009\u0009\u0009e.rotation.x += controls.rotationSpeed;\n\u0009\u0009\u0009\u0009e.rotation.y += controls.rotationSpeed;\n\u0009\u0009\u0009\u0009e.rotation.z += controls.rotationSpeed;\n\u0009\u0009\u0009}\n\u0009\u0009});\n\u0009\u0009stats.update();\n\u0009\u0009requestAnimationFrame(render);\n\u0009\u0009renderer.render(scene, camera);\n\u0009}\n\u0009// 创建一个场景\n\u0009var scene = new THREE.Scene();\n\u0009scene.fog = new THREE.Fog(0xffffff, 0.001, 100);\n//\u0009scene.overrideMaterial = new THREE.MeshLambertMaterial({\n//\u0009\u0009color: 0xffffff\n//\u0009});\n\u0009// 创建一个相机\n\u0009var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n\u0009// 创建一个渲染器\n\u0009var renderer = new THREE.WebGLRenderer();\n\u0009renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));\n\u0009renderer.setSize(window.innerWidth, window.innerHeight);\n\u0009renderer.shadowMapEnabled = true;\n\u0009// 在场景上创建一个轴\n\u0009var axes = new THREE.AxisHelper(20);\n\u0009scene.add(axes);\n\n\u0009//创建一个FPS\n\u0009var stats = initStats();\n\u0009//创建一个gui\n\u0009var controls = new function() {\n\u0009\u0009this.rotationSpeed = 0.02;\n\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009this.removeCube = function() {\n\u0009\u0009\u0009var allChildren = scene.children;\n\u0009\u0009\u0009var lastObject = allChildren[allChildren.length - 1];\n\u0009\u0009\u0009if(lastObject instanceof THREE.Mesh) {\n\u0009\u0009\u0009\u0009scene.remove(lastObject);\n\u0009\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009\u0009}\n\u0009\u0009};\n\n\u0009\u0009this.addCube = function() {\n\n\u0009\u0009\u0009var cubeSize = Math.ceil((Math.random() * 3));\n\u0009\u0009\u0009var cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize);\n\u0009\u0009\u0009var cubeMaterial = new THREE.MeshLambertMaterial({\n\u0009\u0009\u0009\u0009color: Math.random() * 0xffffff\n\u0009\u0009\u0009});\n\u0009\u0009\u0009var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n\u0009\u0009\u0009cube.castShadow = true;\n\u0009\u0009\u0009cube.name = \"cube-\" + scene.children.length;\n\n\u0009\u0009\u0009// position the cube randomly in the scene\n\n\u0009\u0009\u0009cube.position.x = -30 + Math.round((Math.random() * planeGeometry.parameters.width));\n\u0009\u0009\u0009cube.position.y = Math.round((Math.random() * 5));\n\u0009\u0009\u0009cube.position.z = -20 + Math.round((Math.random() * planeGeometry.parameters.height));\n\n\u0009\u0009\u0009// add the cube to the scene\n\u0009\u0009\u0009scene.add(cube);\n\u0009\u0009\u0009this.numberOfObjects = scene.children.length;\n\u0009\u0009};\n\n\u0009\u0009this.outputObjects = function() {\n\u0009\u0009\u0009console.log(scene.children);\n\u0009\u0009}\n\u0009};\n\n\u0009var gui = new dat.GUI();\n\u0009gui.add(controls, 'rotationSpeed', 0, 0.5);\n\u0009gui.add(controls, 'addCube');\n\u0009gui.add(controls, 'removeCube');\n\u0009gui.add(controls, 'outputObjects');\n\u0009gui.add(controls, 'numberOfObjects').listen();\n\u0009// 创建一个平面几何\n\u0009var planeGeometry = new THREE.PlaneGeometry(60, 40, 1, 1);\n\u0009var planeMaterial = new THREE.MeshLambertMaterial({\n\u0009\u0009color: 0xffffff\n\u0009});\n\u0009var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n\u0009//定义几何体的位置\n\u0009plane.rotation.x = -0.5 * Math.PI;\n\u0009plane.position.x = 0;\n\u0009plane.position.y = 0;\n\u0009plane.position.z = 0;\n\n\u0009//\u0009plane.receiveShadow = true;\n\u0009//将几何体添加至场景\n\u0009scene.add(plane);\n\u0009var ambientLight = new THREE.AmbientLight(0x0c0c0c);\n\u0009scene.add(ambientLight);\n\u0009var sportLight = new THREE.SpotLight(0xffffff);\n\u0009sportLight.position.set(-40, 60, -10);\n\u0009sportLight.castShadow = true;\n\u0009scene.add(sportLight);\n\u0009\n\u0009// 定义相机的位置\n\u0009camera.position.x = -30;\n\u0009camera.position.y = 40;\n\u0009camera.position.z = 30;\n\u0009camera.lookAt(scene.position);\n\n\u0009$(\"#WebGL-output\").append(renderer.domElement);\n\u0009render();\n\n\u0009function onResize() {\n\u0009\u0009camera.aspect = window.innerWidth / window.innerHeight;\n\u0009\u0009camera.updateProjectionMatrix();\n\u0009\u0009renderer.setSize(window.innerWidth, window.innerHeight);\n\n\u0009}\n\n\u0009// listen to the resize events\n\u0009window.addEventListener('resize', onResize, false);\n})\n```\ndemo4.html\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\n\u0009\u003chead\u003e\n\u0009\u0009\u003cmeta charset=\"utf-8\" /\u003e\n\u0009\u0009\u003ctitle\u003e\u003c/title\u003e\n\u0009\u0009\u003clink rel=\"stylesheet\" href=\"css/common.css\" /\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/three.js\"\u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/stats.js\"\u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/dat.gui.js\"\u003e\u003c/script\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/jquery-2.1.0.js\"\u003e\u003c/script\u003e\n\u0009\u003c/head\u003e\n\n\u0009\u003cbody\u003e\n\u0009\u0009\u003cdiv id=\"WebGL-output\"\u003e\n\u0009\u0009\u003c/div\u003e\n\u0009\u0009\u003cdiv id=\"Stats-output\"\u003e\u003c/div\u003e\n\u0009\u0009\u003cscript type=\"text/javascript\" src=\"js/lib/demo4.js\"\u003e\u003c/script\u003e\n\u0009\u003c/body\u003e\n\n\u003c/html\u003e\n```","tag_ids":[],"tags":[],"cover":"","article_status":2,"created_at":{"$date":"2017-08-01T02:28:51.000Z"},"updated_at":{"$date":"2017-10-25T06:38:56.251Z"},"deleted_at":{"$date":"0001-01-01T00:00:00.000Z"}}