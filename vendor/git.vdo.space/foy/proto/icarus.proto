syntax = "proto3";

import "queryparameter.proto";
import "dream.proto";
import "nulltype.proto";

package proto;

message Mood {
    string ID = 1;
    string Number = 2;
    string Color = 3;
    string ImageName = 4;
    string CreatedAt = 5;
    string UpdatedAt = 6;
    string DeletedAt = 7;
    string WordAlpha = 8;
    string WordColor = 9;
    BooleanType UsedStatus = 10;
    string Name = 11;
    string Hue = 12;
}

enum ActivityType {
    ActivityTypeNULL = 0;
    ActivityTypeFilter = 1;
    ActivityTypeOthers = 2;
}

enum ActivityStatus {
    ActivityStatusNULL = 0;
    ActivityStatusOnline = 1;
    ActivityStatusOffline = 2;
}


message Activity {
    string ID = 1;
    string ImgURL = 2;
    string ToURL = 3;
    string Title = 4;
    string Description = 5;
    int64 JoinsCount = 6;
    string StartTime = 7;
    string EndTime = 8;
    ActivityStatus Status = 9;
    ActivityType Type = 10;
    string CreatedAt = 11;
    string UpdatedAt = 12;
    string DeletedAt = 13;

}

enum FilterType {
    FilterTypeNULL = 0;
    FilterTypeSystem = 1;
    FilterTypeDailyRecommendation = 2;
}

message ImageFilter {
    string ID = 1;
    string Number = 2;
    string Name = 3;
    string ImageName = 4;
    string ThemeColor = 5;
    string Author = 6;
    string ThreeColor = 7;
    bytes Params = 9;
    string Description = 10;
    string CreatedAt = 11;
    string UpdatedAt = 12;
    string DeletedAt = 13;
    BooleanType UsedStatus = 14;
    float Price = 15;
    int64 UsedCount = 16;
    int64 PurchasesCount = 17;
    string SourceName = 18;
    string OrderNumber = 19;
    string Hue = 20;
    StringType Currency = 21;
    FilterType Type = 22;
}

message Nature {
    string ID = 1;
    string MoodNum = 2;
    Mood Mood = 3;
    string ImageFilterNum = 4;
    ImageFilter ImageFilter = 5;
    string Logion = 6;
    string Depict = 7;
    string ApplyAt = 8;
    string CreatedAt = 9;
    string UpdatedAt = 10;
    string DeletedAt = 11;
}

message PhotoFilterRelation {
    string ID = 1;
    string CreatedAt = 2;
    string UpdatedAt = 3;
    string DeletedAt = 4;
    string PhotoUUID = 5;
    string ImageFilterID = 6;
}


message NatureList {

    repeated Nature Data = 1;

}

message MoodList {

    repeated Mood Data = 1;

}

message ActivityList {

    repeated Activity Data = 1;

}

message ImageFilterList {

    repeated ImageFilter Data = 1;

}

message StringIDs {

    repeated string Data = 1;
}

message StringID {

    string Data = 1;
}

message UUIDWithID {
    string UUID = 1;
    string Data = 2;
}

message UserFilter {
    ImageFilter Filter = 1;
    string UUID = 2;
    bool Prefer = 3;
    bool Paid = 4;
}

service IcarusServices {
    rpc NewNatures (NatureList) returns (NatureList) {
    }
    rpc DeleteNaturesByIDs (StringIDs) returns (Bool) {
    }
    rpc GetNatureByIDs (StringIDs) returns (NatureList) {
    }
    rpc UpdateNatures (NatureList) returns (NatureList) {
    }
    rpc FindNaturesByParams (RequestParams) returns (PageModel) {
    }
    rpc GetUserFilterByID (UUIDWithID) returns (Bool) {
    }
    rpc InsertUserFilter (UserFilter) returns (Bool) {
    }
    rpc GetImageFilterByID (StringID) returns (ImageFilter) {
    }

    rpc NewMoods (MoodList) returns (MoodList) {
    }
    rpc DeleteMoodsByIDs (StringIDs) returns (Bool) {
    }
    rpc GetMoodByNum (Mood) returns (MoodList) {
    }
    rpc GetMoodByIDs (StringIDs) returns (MoodList) {
    }
    rpc UpdateMoods (MoodList) returns (MoodList) {
    }
    rpc FindMoodsByParams (RequestParams) returns (PageModel) {
    }

    rpc NewActivitys (ActivityList) returns (ActivityList) {
    }
    rpc DeleteActivitysByIDs (StringIDs) returns (Bool) {
    }
    rpc GetActivityByIDs (StringIDs) returns (ActivityList) {
    }
    rpc UpdateActivitys (ActivityList) returns (ActivityList) {
    }
    rpc FindActivitysByParams (RequestParams) returns (PageModel) {
    }

    rpc NewImageFilters (ImageFilterList) returns (ImageFilterList) {
    }
    rpc DeleteImageFiltersByIDs (StringIDs) returns (Bool) {
    }
    rpc GetImageFilterByIDs (StringIDs) returns (ImageFilterList) {
    }
    rpc GetImageFilterByNum (ImageFilter) returns (ImageFilterList) {
    }
    rpc UpdateImageFilters (ImageFilterList) returns (ImageFilterList) {
    }
    rpc FindImageFiltersByParams (RequestParams) returns (PageModel) {
    }

}