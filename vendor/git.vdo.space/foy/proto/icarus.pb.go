// Code generated by protoc-gen-go.
// source: icarus.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ActivityType int32

const (
	ActivityType_ActivityTypeNULL   ActivityType = 0
	ActivityType_ActivityTypeFilter ActivityType = 1
	ActivityType_ActivityTypeOthers ActivityType = 2
)

var ActivityType_name = map[int32]string{
	0: "ActivityTypeNULL",
	1: "ActivityTypeFilter",
	2: "ActivityTypeOthers",
}
var ActivityType_value = map[string]int32{
	"ActivityTypeNULL":   0,
	"ActivityTypeFilter": 1,
	"ActivityTypeOthers": 2,
}

func (x ActivityType) String() string {
	return proto1.EnumName(ActivityType_name, int32(x))
}
func (ActivityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type ActivityStatus int32

const (
	ActivityStatus_ActivityStatusNULL    ActivityStatus = 0
	ActivityStatus_ActivityStatusOnline  ActivityStatus = 1
	ActivityStatus_ActivityStatusOffline ActivityStatus = 2
)

var ActivityStatus_name = map[int32]string{
	0: "ActivityStatusNULL",
	1: "ActivityStatusOnline",
	2: "ActivityStatusOffline",
}
var ActivityStatus_value = map[string]int32{
	"ActivityStatusNULL":    0,
	"ActivityStatusOnline":  1,
	"ActivityStatusOffline": 2,
}

func (x ActivityStatus) String() string {
	return proto1.EnumName(ActivityStatus_name, int32(x))
}
func (ActivityStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

type FilterType int32

const (
	FilterType_FilterTypeNULL                FilterType = 0
	FilterType_FilterTypeSystem              FilterType = 1
	FilterType_FilterTypeDailyRecommendation FilterType = 2
)

var FilterType_name = map[int32]string{
	0: "FilterTypeNULL",
	1: "FilterTypeSystem",
	2: "FilterTypeDailyRecommendation",
}
var FilterType_value = map[string]int32{
	"FilterTypeNULL":                0,
	"FilterTypeSystem":              1,
	"FilterTypeDailyRecommendation": 2,
}

func (x FilterType) String() string {
	return proto1.EnumName(FilterType_name, int32(x))
}
func (FilterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type Mood struct {
	ID         string       `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Number     string       `protobuf:"bytes,2,opt,name=Number,json=number" json:"Number,omitempty"`
	Color      string       `protobuf:"bytes,3,opt,name=Color,json=color" json:"Color,omitempty"`
	ImageName  string       `protobuf:"bytes,4,opt,name=ImageName,json=imageName" json:"ImageName,omitempty"`
	CreatedAt  string       `protobuf:"bytes,5,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UpdatedAt  string       `protobuf:"bytes,6,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	DeletedAt  string       `protobuf:"bytes,7,opt,name=DeletedAt,json=deletedAt" json:"DeletedAt,omitempty"`
	WordAlpha  string       `protobuf:"bytes,8,opt,name=WordAlpha,json=wordAlpha" json:"WordAlpha,omitempty"`
	WordColor  string       `protobuf:"bytes,9,opt,name=WordColor,json=wordColor" json:"WordColor,omitempty"`
	UsedStatus *BooleanType `protobuf:"bytes,10,opt,name=UsedStatus,json=usedStatus" json:"UsedStatus,omitempty"`
	Name       string       `protobuf:"bytes,11,opt,name=Name,json=name" json:"Name,omitempty"`
	Hue        string       `protobuf:"bytes,12,opt,name=Hue,json=hue" json:"Hue,omitempty"`
}

func (m *Mood) Reset()                    { *m = Mood{} }
func (m *Mood) String() string            { return proto1.CompactTextString(m) }
func (*Mood) ProtoMessage()               {}
func (*Mood) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Mood) GetUsedStatus() *BooleanType {
	if m != nil {
		return m.UsedStatus
	}
	return nil
}

type Activity struct {
	ID          string         `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	ImgURL      string         `protobuf:"bytes,2,opt,name=ImgURL,json=imgURL" json:"ImgURL,omitempty"`
	ToURL       string         `protobuf:"bytes,3,opt,name=ToURL,json=toURL" json:"ToURL,omitempty"`
	Title       string         `protobuf:"bytes,4,opt,name=Title,json=title" json:"Title,omitempty"`
	Description string         `protobuf:"bytes,5,opt,name=Description,json=description" json:"Description,omitempty"`
	JoinsCount  int64          `protobuf:"varint,6,opt,name=JoinsCount,json=joinsCount" json:"JoinsCount,omitempty"`
	StartTime   string         `protobuf:"bytes,7,opt,name=StartTime,json=startTime" json:"StartTime,omitempty"`
	EndTime     string         `protobuf:"bytes,8,opt,name=EndTime,json=endTime" json:"EndTime,omitempty"`
	Status      ActivityStatus `protobuf:"varint,9,opt,name=Status,json=status,enum=proto.ActivityStatus" json:"Status,omitempty"`
	Type        ActivityType   `protobuf:"varint,10,opt,name=Type,json=type,enum=proto.ActivityType" json:"Type,omitempty"`
	CreatedAt   string         `protobuf:"bytes,11,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UpdatedAt   string         `protobuf:"bytes,12,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	DeletedAt   string         `protobuf:"bytes,13,opt,name=DeletedAt,json=deletedAt" json:"DeletedAt,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto1.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

type ImageFilter struct {
	ID             string       `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Number         string       `protobuf:"bytes,2,opt,name=Number,json=number" json:"Number,omitempty"`
	Name           string       `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	ImageName      string       `protobuf:"bytes,4,opt,name=ImageName,json=imageName" json:"ImageName,omitempty"`
	ThemeColor     string       `protobuf:"bytes,5,opt,name=ThemeColor,json=themeColor" json:"ThemeColor,omitempty"`
	Author         string       `protobuf:"bytes,6,opt,name=Author,json=author" json:"Author,omitempty"`
	ThreeColor     string       `protobuf:"bytes,7,opt,name=ThreeColor,json=threeColor" json:"ThreeColor,omitempty"`
	Params         []byte       `protobuf:"bytes,9,opt,name=Params,json=params,proto3" json:"Params,omitempty"`
	Description    string       `protobuf:"bytes,10,opt,name=Description,json=description" json:"Description,omitempty"`
	CreatedAt      string       `protobuf:"bytes,11,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UpdatedAt      string       `protobuf:"bytes,12,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	DeletedAt      string       `protobuf:"bytes,13,opt,name=DeletedAt,json=deletedAt" json:"DeletedAt,omitempty"`
	UsedStatus     *BooleanType `protobuf:"bytes,14,opt,name=UsedStatus,json=usedStatus" json:"UsedStatus,omitempty"`
	Price          float32      `protobuf:"fixed32,15,opt,name=Price,json=price" json:"Price,omitempty"`
	UsedCount      int64        `protobuf:"varint,16,opt,name=UsedCount,json=usedCount" json:"UsedCount,omitempty"`
	PurchasesCount int64        `protobuf:"varint,17,opt,name=PurchasesCount,json=purchasesCount" json:"PurchasesCount,omitempty"`
	SourceName     string       `protobuf:"bytes,18,opt,name=SourceName,json=sourceName" json:"SourceName,omitempty"`
	OrderNumber    string       `protobuf:"bytes,19,opt,name=OrderNumber,json=orderNumber" json:"OrderNumber,omitempty"`
	Hue            string       `protobuf:"bytes,20,opt,name=Hue,json=hue" json:"Hue,omitempty"`
	Currency       *StringType  `protobuf:"bytes,21,opt,name=Currency,json=currency" json:"Currency,omitempty"`
	Type           FilterType   `protobuf:"varint,22,opt,name=Type,json=type,enum=proto.FilterType" json:"Type,omitempty"`
}

func (m *ImageFilter) Reset()                    { *m = ImageFilter{} }
func (m *ImageFilter) String() string            { return proto1.CompactTextString(m) }
func (*ImageFilter) ProtoMessage()               {}
func (*ImageFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ImageFilter) GetUsedStatus() *BooleanType {
	if m != nil {
		return m.UsedStatus
	}
	return nil
}

func (m *ImageFilter) GetCurrency() *StringType {
	if m != nil {
		return m.Currency
	}
	return nil
}

type Nature struct {
	ID             string       `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	MoodNum        string       `protobuf:"bytes,2,opt,name=MoodNum,json=moodNum" json:"MoodNum,omitempty"`
	Mood           *Mood        `protobuf:"bytes,3,opt,name=Mood,json=mood" json:"Mood,omitempty"`
	ImageFilterNum string       `protobuf:"bytes,4,opt,name=ImageFilterNum,json=imageFilterNum" json:"ImageFilterNum,omitempty"`
	ImageFilter    *ImageFilter `protobuf:"bytes,5,opt,name=ImageFilter,json=imageFilter" json:"ImageFilter,omitempty"`
	Logion         string       `protobuf:"bytes,6,opt,name=Logion,json=logion" json:"Logion,omitempty"`
	Depict         string       `protobuf:"bytes,7,opt,name=Depict,json=depict" json:"Depict,omitempty"`
	ApplyAt        string       `protobuf:"bytes,8,opt,name=ApplyAt,json=applyAt" json:"ApplyAt,omitempty"`
	CreatedAt      string       `protobuf:"bytes,9,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UpdatedAt      string       `protobuf:"bytes,10,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	DeletedAt      string       `protobuf:"bytes,11,opt,name=DeletedAt,json=deletedAt" json:"DeletedAt,omitempty"`
}

func (m *Nature) Reset()                    { *m = Nature{} }
func (m *Nature) String() string            { return proto1.CompactTextString(m) }
func (*Nature) ProtoMessage()               {}
func (*Nature) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *Nature) GetMood() *Mood {
	if m != nil {
		return m.Mood
	}
	return nil
}

func (m *Nature) GetImageFilter() *ImageFilter {
	if m != nil {
		return m.ImageFilter
	}
	return nil
}

type PhotoFilterRelation struct {
	ID            string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	CreatedAt     string `protobuf:"bytes,2,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UpdatedAt     string `protobuf:"bytes,3,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	DeletedAt     string `protobuf:"bytes,4,opt,name=DeletedAt,json=deletedAt" json:"DeletedAt,omitempty"`
	PhotoUUID     string `protobuf:"bytes,5,opt,name=PhotoUUID,json=photoUUID" json:"PhotoUUID,omitempty"`
	ImageFilterID string `protobuf:"bytes,6,opt,name=ImageFilterID,json=imageFilterID" json:"ImageFilterID,omitempty"`
}

func (m *PhotoFilterRelation) Reset()                    { *m = PhotoFilterRelation{} }
func (m *PhotoFilterRelation) String() string            { return proto1.CompactTextString(m) }
func (*PhotoFilterRelation) ProtoMessage()               {}
func (*PhotoFilterRelation) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

type NatureList struct {
	Data []*Nature `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *NatureList) Reset()                    { *m = NatureList{} }
func (m *NatureList) String() string            { return proto1.CompactTextString(m) }
func (*NatureList) ProtoMessage()               {}
func (*NatureList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *NatureList) GetData() []*Nature {
	if m != nil {
		return m.Data
	}
	return nil
}

type MoodList struct {
	Data []*Mood `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *MoodList) Reset()                    { *m = MoodList{} }
func (m *MoodList) String() string            { return proto1.CompactTextString(m) }
func (*MoodList) ProtoMessage()               {}
func (*MoodList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *MoodList) GetData() []*Mood {
	if m != nil {
		return m.Data
	}
	return nil
}

type ActivityList struct {
	Data []*Activity `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *ActivityList) Reset()                    { *m = ActivityList{} }
func (m *ActivityList) String() string            { return proto1.CompactTextString(m) }
func (*ActivityList) ProtoMessage()               {}
func (*ActivityList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *ActivityList) GetData() []*Activity {
	if m != nil {
		return m.Data
	}
	return nil
}

type ImageFilterList struct {
	Data []*ImageFilter `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *ImageFilterList) Reset()                    { *m = ImageFilterList{} }
func (m *ImageFilterList) String() string            { return proto1.CompactTextString(m) }
func (*ImageFilterList) ProtoMessage()               {}
func (*ImageFilterList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *ImageFilterList) GetData() []*ImageFilter {
	if m != nil {
		return m.Data
	}
	return nil
}

type StringIDs struct {
	Data []string `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *StringIDs) Reset()                    { *m = StringIDs{} }
func (m *StringIDs) String() string            { return proto1.CompactTextString(m) }
func (*StringIDs) ProtoMessage()               {}
func (*StringIDs) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

type StringID struct {
	Data string `protobuf:"bytes,1,opt,name=Data,json=data" json:"Data,omitempty"`
}

func (m *StringID) Reset()                    { *m = StringID{} }
func (m *StringID) String() string            { return proto1.CompactTextString(m) }
func (*StringID) ProtoMessage()               {}
func (*StringID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

type UUIDWithID struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=Data,json=data" json:"Data,omitempty"`
}

func (m *UUIDWithID) Reset()                    { *m = UUIDWithID{} }
func (m *UUIDWithID) String() string            { return proto1.CompactTextString(m) }
func (*UUIDWithID) ProtoMessage()               {}
func (*UUIDWithID) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

type UserFilter struct {
	Filter *ImageFilter `protobuf:"bytes,1,opt,name=Filter,json=filter" json:"Filter,omitempty"`
	UUID   string       `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Prefer bool         `protobuf:"varint,3,opt,name=Prefer,json=prefer" json:"Prefer,omitempty"`
	Paid   bool         `protobuf:"varint,4,opt,name=Paid,json=paid" json:"Paid,omitempty"`
}

func (m *UserFilter) Reset()                    { *m = UserFilter{} }
func (m *UserFilter) String() string            { return proto1.CompactTextString(m) }
func (*UserFilter) ProtoMessage()               {}
func (*UserFilter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *UserFilter) GetFilter() *ImageFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func init() {
	proto1.RegisterType((*Mood)(nil), "proto.Mood")
	proto1.RegisterType((*Activity)(nil), "proto.Activity")
	proto1.RegisterType((*ImageFilter)(nil), "proto.ImageFilter")
	proto1.RegisterType((*Nature)(nil), "proto.Nature")
	proto1.RegisterType((*PhotoFilterRelation)(nil), "proto.PhotoFilterRelation")
	proto1.RegisterType((*NatureList)(nil), "proto.NatureList")
	proto1.RegisterType((*MoodList)(nil), "proto.MoodList")
	proto1.RegisterType((*ActivityList)(nil), "proto.ActivityList")
	proto1.RegisterType((*ImageFilterList)(nil), "proto.ImageFilterList")
	proto1.RegisterType((*StringIDs)(nil), "proto.StringIDs")
	proto1.RegisterType((*StringID)(nil), "proto.StringID")
	proto1.RegisterType((*UUIDWithID)(nil), "proto.UUIDWithID")
	proto1.RegisterType((*UserFilter)(nil), "proto.UserFilter")
	proto1.RegisterEnum("proto.ActivityType", ActivityType_name, ActivityType_value)
	proto1.RegisterEnum("proto.ActivityStatus", ActivityStatus_name, ActivityStatus_value)
	proto1.RegisterEnum("proto.FilterType", FilterType_name, FilterType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for IcarusServices service

type IcarusServicesClient interface {
	NewNatures(ctx context.Context, in *NatureList, opts ...client.CallOption) (*NatureList, error)
	DeleteNaturesByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error)
	GetNatureByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*NatureList, error)
	UpdateNatures(ctx context.Context, in *NatureList, opts ...client.CallOption) (*NatureList, error)
	FindNaturesByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error)
	GetUserFilterByID(ctx context.Context, in *UUIDWithID, opts ...client.CallOption) (*Bool, error)
	InsertUserFilter(ctx context.Context, in *UserFilter, opts ...client.CallOption) (*Bool, error)
	GetImageFilterByID(ctx context.Context, in *StringID, opts ...client.CallOption) (*ImageFilter, error)
	NewMoods(ctx context.Context, in *MoodList, opts ...client.CallOption) (*MoodList, error)
	DeleteMoodsByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error)
	GetMoodByNum(ctx context.Context, in *Mood, opts ...client.CallOption) (*MoodList, error)
	GetMoodByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*MoodList, error)
	UpdateMoods(ctx context.Context, in *MoodList, opts ...client.CallOption) (*MoodList, error)
	FindMoodsByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error)
	NewActivitys(ctx context.Context, in *ActivityList, opts ...client.CallOption) (*ActivityList, error)
	DeleteActivitysByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error)
	GetActivityByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*ActivityList, error)
	UpdateActivitys(ctx context.Context, in *ActivityList, opts ...client.CallOption) (*ActivityList, error)
	FindActivitysByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error)
	NewImageFilters(ctx context.Context, in *ImageFilterList, opts ...client.CallOption) (*ImageFilterList, error)
	DeleteImageFiltersByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error)
	GetImageFilterByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*ImageFilterList, error)
	GetImageFilterByNum(ctx context.Context, in *ImageFilter, opts ...client.CallOption) (*ImageFilterList, error)
	UpdateImageFilters(ctx context.Context, in *ImageFilterList, opts ...client.CallOption) (*ImageFilterList, error)
	FindImageFiltersByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error)
}

type icarusServicesClient struct {
	c           client.Client
	serviceName string
}

func NewIcarusServicesClient(serviceName string, c client.Client) IcarusServicesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto"
	}
	return &icarusServicesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *icarusServicesClient) NewNatures(ctx context.Context, in *NatureList, opts ...client.CallOption) (*NatureList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.NewNatures", in)
	out := new(NatureList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) DeleteNaturesByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.DeleteNaturesByIDs", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetNatureByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*NatureList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetNatureByIDs", in)
	out := new(NatureList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) UpdateNatures(ctx context.Context, in *NatureList, opts ...client.CallOption) (*NatureList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.UpdateNatures", in)
	out := new(NatureList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) FindNaturesByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.FindNaturesByParams", in)
	out := new(PageModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetUserFilterByID(ctx context.Context, in *UUIDWithID, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetUserFilterByID", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) InsertUserFilter(ctx context.Context, in *UserFilter, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.InsertUserFilter", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetImageFilterByID(ctx context.Context, in *StringID, opts ...client.CallOption) (*ImageFilter, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetImageFilterByID", in)
	out := new(ImageFilter)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) NewMoods(ctx context.Context, in *MoodList, opts ...client.CallOption) (*MoodList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.NewMoods", in)
	out := new(MoodList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) DeleteMoodsByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.DeleteMoodsByIDs", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetMoodByNum(ctx context.Context, in *Mood, opts ...client.CallOption) (*MoodList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetMoodByNum", in)
	out := new(MoodList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetMoodByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*MoodList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetMoodByIDs", in)
	out := new(MoodList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) UpdateMoods(ctx context.Context, in *MoodList, opts ...client.CallOption) (*MoodList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.UpdateMoods", in)
	out := new(MoodList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) FindMoodsByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.FindMoodsByParams", in)
	out := new(PageModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) NewActivitys(ctx context.Context, in *ActivityList, opts ...client.CallOption) (*ActivityList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.NewActivitys", in)
	out := new(ActivityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) DeleteActivitysByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.DeleteActivitysByIDs", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetActivityByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*ActivityList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetActivityByIDs", in)
	out := new(ActivityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) UpdateActivitys(ctx context.Context, in *ActivityList, opts ...client.CallOption) (*ActivityList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.UpdateActivitys", in)
	out := new(ActivityList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) FindActivitysByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.FindActivitysByParams", in)
	out := new(PageModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) NewImageFilters(ctx context.Context, in *ImageFilterList, opts ...client.CallOption) (*ImageFilterList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.NewImageFilters", in)
	out := new(ImageFilterList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) DeleteImageFiltersByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.DeleteImageFiltersByIDs", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetImageFilterByIDs(ctx context.Context, in *StringIDs, opts ...client.CallOption) (*ImageFilterList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetImageFilterByIDs", in)
	out := new(ImageFilterList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) GetImageFilterByNum(ctx context.Context, in *ImageFilter, opts ...client.CallOption) (*ImageFilterList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.GetImageFilterByNum", in)
	out := new(ImageFilterList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) UpdateImageFilters(ctx context.Context, in *ImageFilterList, opts ...client.CallOption) (*ImageFilterList, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.UpdateImageFilters", in)
	out := new(ImageFilterList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *icarusServicesClient) FindImageFiltersByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error) {
	req := c.c.NewRequest(c.serviceName, "IcarusServices.FindImageFiltersByParams", in)
	out := new(PageModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IcarusServices service

type IcarusServicesHandler interface {
	NewNatures(context.Context, *NatureList, *NatureList) error
	DeleteNaturesByIDs(context.Context, *StringIDs, *Bool) error
	GetNatureByIDs(context.Context, *StringIDs, *NatureList) error
	UpdateNatures(context.Context, *NatureList, *NatureList) error
	FindNaturesByParams(context.Context, *RequestParams, *PageModel) error
	GetUserFilterByID(context.Context, *UUIDWithID, *Bool) error
	InsertUserFilter(context.Context, *UserFilter, *Bool) error
	GetImageFilterByID(context.Context, *StringID, *ImageFilter) error
	NewMoods(context.Context, *MoodList, *MoodList) error
	DeleteMoodsByIDs(context.Context, *StringIDs, *Bool) error
	GetMoodByNum(context.Context, *Mood, *MoodList) error
	GetMoodByIDs(context.Context, *StringIDs, *MoodList) error
	UpdateMoods(context.Context, *MoodList, *MoodList) error
	FindMoodsByParams(context.Context, *RequestParams, *PageModel) error
	NewActivitys(context.Context, *ActivityList, *ActivityList) error
	DeleteActivitysByIDs(context.Context, *StringIDs, *Bool) error
	GetActivityByIDs(context.Context, *StringIDs, *ActivityList) error
	UpdateActivitys(context.Context, *ActivityList, *ActivityList) error
	FindActivitysByParams(context.Context, *RequestParams, *PageModel) error
	NewImageFilters(context.Context, *ImageFilterList, *ImageFilterList) error
	DeleteImageFiltersByIDs(context.Context, *StringIDs, *Bool) error
	GetImageFilterByIDs(context.Context, *StringIDs, *ImageFilterList) error
	GetImageFilterByNum(context.Context, *ImageFilter, *ImageFilterList) error
	UpdateImageFilters(context.Context, *ImageFilterList, *ImageFilterList) error
	FindImageFiltersByParams(context.Context, *RequestParams, *PageModel) error
}

func RegisterIcarusServicesHandler(s server.Server, hdlr IcarusServicesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&IcarusServices{hdlr}, opts...))
}

type IcarusServices struct {
	IcarusServicesHandler
}

func (h *IcarusServices) NewNatures(ctx context.Context, in *NatureList, out *NatureList) error {
	return h.IcarusServicesHandler.NewNatures(ctx, in, out)
}

func (h *IcarusServices) DeleteNaturesByIDs(ctx context.Context, in *StringIDs, out *Bool) error {
	return h.IcarusServicesHandler.DeleteNaturesByIDs(ctx, in, out)
}

func (h *IcarusServices) GetNatureByIDs(ctx context.Context, in *StringIDs, out *NatureList) error {
	return h.IcarusServicesHandler.GetNatureByIDs(ctx, in, out)
}

func (h *IcarusServices) UpdateNatures(ctx context.Context, in *NatureList, out *NatureList) error {
	return h.IcarusServicesHandler.UpdateNatures(ctx, in, out)
}

func (h *IcarusServices) FindNaturesByParams(ctx context.Context, in *RequestParams, out *PageModel) error {
	return h.IcarusServicesHandler.FindNaturesByParams(ctx, in, out)
}

func (h *IcarusServices) GetUserFilterByID(ctx context.Context, in *UUIDWithID, out *Bool) error {
	return h.IcarusServicesHandler.GetUserFilterByID(ctx, in, out)
}

func (h *IcarusServices) InsertUserFilter(ctx context.Context, in *UserFilter, out *Bool) error {
	return h.IcarusServicesHandler.InsertUserFilter(ctx, in, out)
}

func (h *IcarusServices) GetImageFilterByID(ctx context.Context, in *StringID, out *ImageFilter) error {
	return h.IcarusServicesHandler.GetImageFilterByID(ctx, in, out)
}

func (h *IcarusServices) NewMoods(ctx context.Context, in *MoodList, out *MoodList) error {
	return h.IcarusServicesHandler.NewMoods(ctx, in, out)
}

func (h *IcarusServices) DeleteMoodsByIDs(ctx context.Context, in *StringIDs, out *Bool) error {
	return h.IcarusServicesHandler.DeleteMoodsByIDs(ctx, in, out)
}

func (h *IcarusServices) GetMoodByNum(ctx context.Context, in *Mood, out *MoodList) error {
	return h.IcarusServicesHandler.GetMoodByNum(ctx, in, out)
}

func (h *IcarusServices) GetMoodByIDs(ctx context.Context, in *StringIDs, out *MoodList) error {
	return h.IcarusServicesHandler.GetMoodByIDs(ctx, in, out)
}

func (h *IcarusServices) UpdateMoods(ctx context.Context, in *MoodList, out *MoodList) error {
	return h.IcarusServicesHandler.UpdateMoods(ctx, in, out)
}

func (h *IcarusServices) FindMoodsByParams(ctx context.Context, in *RequestParams, out *PageModel) error {
	return h.IcarusServicesHandler.FindMoodsByParams(ctx, in, out)
}

func (h *IcarusServices) NewActivitys(ctx context.Context, in *ActivityList, out *ActivityList) error {
	return h.IcarusServicesHandler.NewActivitys(ctx, in, out)
}

func (h *IcarusServices) DeleteActivitysByIDs(ctx context.Context, in *StringIDs, out *Bool) error {
	return h.IcarusServicesHandler.DeleteActivitysByIDs(ctx, in, out)
}

func (h *IcarusServices) GetActivityByIDs(ctx context.Context, in *StringIDs, out *ActivityList) error {
	return h.IcarusServicesHandler.GetActivityByIDs(ctx, in, out)
}

func (h *IcarusServices) UpdateActivitys(ctx context.Context, in *ActivityList, out *ActivityList) error {
	return h.IcarusServicesHandler.UpdateActivitys(ctx, in, out)
}

func (h *IcarusServices) FindActivitysByParams(ctx context.Context, in *RequestParams, out *PageModel) error {
	return h.IcarusServicesHandler.FindActivitysByParams(ctx, in, out)
}

func (h *IcarusServices) NewImageFilters(ctx context.Context, in *ImageFilterList, out *ImageFilterList) error {
	return h.IcarusServicesHandler.NewImageFilters(ctx, in, out)
}

func (h *IcarusServices) DeleteImageFiltersByIDs(ctx context.Context, in *StringIDs, out *Bool) error {
	return h.IcarusServicesHandler.DeleteImageFiltersByIDs(ctx, in, out)
}

func (h *IcarusServices) GetImageFilterByIDs(ctx context.Context, in *StringIDs, out *ImageFilterList) error {
	return h.IcarusServicesHandler.GetImageFilterByIDs(ctx, in, out)
}

func (h *IcarusServices) GetImageFilterByNum(ctx context.Context, in *ImageFilter, out *ImageFilterList) error {
	return h.IcarusServicesHandler.GetImageFilterByNum(ctx, in, out)
}

func (h *IcarusServices) UpdateImageFilters(ctx context.Context, in *ImageFilterList, out *ImageFilterList) error {
	return h.IcarusServicesHandler.UpdateImageFilters(ctx, in, out)
}

func (h *IcarusServices) FindImageFiltersByParams(ctx context.Context, in *RequestParams, out *PageModel) error {
	return h.IcarusServicesHandler.FindImageFiltersByParams(ctx, in, out)
}

func init() { proto1.RegisterFile("icarus.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0xb6, 0x7e, 0x2d, 0x0f, 0x6d, 0x99, 0x5e, 0xcb, 0x3e, 0x3c, 0xc2, 0x39, 0x89, 0xa3, 0xb6,
	0xa9, 0xe1, 0x22, 0x2e, 0xaa, 0xb8, 0x08, 0xda, 0x20, 0x28, 0x14, 0xab, 0x71, 0x55, 0x38, 0x8a,
	0x41, 0x5b, 0x08, 0x7a, 0xd1, 0x0b, 0x46, 0x1c, 0x5b, 0x2c, 0x28, 0x92, 0x59, 0x2e, 0xe3, 0xea,
	0x15, 0x0a, 0xf4, 0xa9, 0xfa, 0x06, 0x05, 0xfa, 0x00, 0x7d, 0x93, 0x62, 0xff, 0xc4, 0x1f, 0xcb,
	0x82, 0xdd, 0xa2, 0x57, 0xc2, 0x7c, 0x33, 0xc3, 0x9d, 0xfd, 0xe6, 0x9b, 0x59, 0xc1, 0xba, 0x37,
	0x76, 0x68, 0x12, 0x1f, 0x46, 0x34, 0x64, 0x21, 0xa9, 0x89, 0x9f, 0x76, 0xeb, 0x7d, 0x82, 0x74,
	0x16, 0x39, 0xd4, 0x99, 0x22, 0x43, 0x2a, 0x9d, 0x6d, 0xc3, 0xa5, 0xe8, 0x4c, 0x95, 0xd1, 0x0c,
	0x12, 0xdf, 0x67, 0xb3, 0x08, 0xa5, 0xdd, 0xf9, 0xbd, 0x0c, 0xd5, 0xd7, 0x61, 0xe8, 0x92, 0x26,
	0x94, 0x07, 0x7d, 0xab, 0xb4, 0x57, 0xda, 0x5f, 0xb3, 0xcb, 0x5e, 0x9f, 0xec, 0x42, 0x7d, 0x98,
	0x4c, 0xdf, 0x21, 0xb5, 0xca, 0x02, 0xab, 0x07, 0xc2, 0x22, 0x2d, 0xa8, 0x1d, 0x87, 0x7e, 0x48,
	0xad, 0x8a, 0x80, 0x6b, 0x63, 0x6e, 0x90, 0xff, 0xc1, 0xda, 0x60, 0xea, 0x5c, 0xe1, 0xd0, 0x99,
	0xa2, 0x55, 0x15, 0x9e, 0x35, 0x4f, 0x03, 0xdc, 0x7b, 0x4c, 0xd1, 0x61, 0xe8, 0xf6, 0x98, 0x55,
	0x93, 0xde, 0xb1, 0x06, 0xb8, 0x77, 0x14, 0xb9, 0xca, 0x5b, 0x97, 0xde, 0x44, 0x03, 0xdc, 0xdb,
	0x47, 0x1f, 0xa5, 0x77, 0x55, 0x7a, 0x5d, 0x0d, 0x70, 0xef, 0xdb, 0x90, 0xba, 0x3d, 0x3f, 0x9a,
	0x38, 0x56, 0x43, 0x7a, 0xaf, 0x35, 0xa0, 0xbd, 0xb2, 0xde, 0xb5, 0xd4, 0x2b, 0x00, 0xd2, 0x05,
	0x18, 0xc5, 0xe8, 0x9e, 0x33, 0x87, 0x25, 0xb1, 0x05, 0x7b, 0xa5, 0x7d, 0xa3, 0x4b, 0x24, 0x2d,
	0x87, 0x2f, 0xc3, 0xd0, 0x47, 0x27, 0xb8, 0x98, 0x45, 0x68, 0x43, 0x32, 0x8f, 0x22, 0x04, 0xaa,
	0xe2, 0x8a, 0x86, 0xf8, 0x58, 0x35, 0xe0, 0xb7, 0x33, 0xa1, 0xf2, 0x5d, 0x82, 0xd6, 0xba, 0x80,
	0x2a, 0x93, 0x04, 0x3b, 0xbf, 0x54, 0xa0, 0xd1, 0x1b, 0x33, 0xef, 0x83, 0xc7, 0x66, 0x8b, 0x88,
	0x1d, 0x4c, 0xaf, 0x46, 0xf6, 0xa9, 0x26, 0xd6, 0x13, 0x16, 0x27, 0xf6, 0x22, 0xe4, 0xb0, 0x22,
	0x96, 0x85, 0x1a, 0xf5, 0x98, 0xaf, 0x49, 0xad, 0x31, 0x6e, 0x90, 0x3d, 0x30, 0xfa, 0x18, 0x8f,
	0xa9, 0x17, 0x31, 0x2f, 0x0c, 0x14, 0xa5, 0x86, 0x9b, 0x42, 0xe4, 0x01, 0xc0, 0xf7, 0xa1, 0x17,
	0xc4, 0xc7, 0x61, 0x12, 0x48, 0x56, 0x2b, 0x36, 0xfc, 0x34, 0x47, 0x38, 0x35, 0xe7, 0xcc, 0xa1,
	0xec, 0xc2, 0x9b, 0xa2, 0xa6, 0x35, 0xd6, 0x00, 0xb1, 0x60, 0xf5, 0xdb, 0xc0, 0x15, 0x3e, 0x49,
	0xea, 0x2a, 0x4a, 0x93, 0x3c, 0x81, 0xba, 0x22, 0x8c, 0xf3, 0xd9, 0xec, 0xee, 0x28, 0xc2, 0xf4,
	0x75, 0xa5, 0xd3, 0xae, 0xc7, 0x92, 0xaf, 0x4f, 0xa1, 0xca, 0x39, 0x14, 0xec, 0x36, 0xbb, 0xdb,
	0x85, 0x60, 0x41, 0x6f, 0x95, 0xab, 0x31, 0x2f, 0x11, 0x63, 0xa9, 0x44, 0xd6, 0x97, 0x4a, 0x64,
	0xa3, 0x20, 0x91, 0xce, 0xaf, 0x35, 0x30, 0x84, 0x36, 0x5f, 0x79, 0x3e, 0x43, 0x7a, 0x67, 0xa1,
	0xeb, 0x56, 0x57, 0x32, 0xad, 0x5e, 0x2e, 0xf3, 0x07, 0x00, 0x17, 0x13, 0x9c, 0xa2, 0xd4, 0x9b,
	0x6c, 0x0a, 0xb0, 0x39, 0xc2, 0x4f, 0xea, 0x25, 0x6c, 0x12, 0x52, 0xa5, 0xf2, 0xba, 0x23, 0x2c,
	0x99, 0x47, 0x51, 0xe5, 0xad, 0xea, 0x3c, 0x8d, 0xf0, 0xbc, 0x33, 0x3e, 0xd3, 0x92, 0xf3, 0x75,
	0xbb, 0x2e, 0x26, 0x3c, 0x2e, 0xaa, 0x00, 0x6e, 0xaa, 0xe0, 0x5f, 0x63, 0xb5, 0x30, 0x3c, 0xcd,
	0x3b, 0x0d, 0x4f, 0x0b, 0x6a, 0x67, 0xd4, 0x1b, 0xa3, 0xb5, 0xb9, 0x57, 0xda, 0x2f, 0xdb, 0xb5,
	0x88, 0x1b, 0xa2, 0x8a, 0x18, 0x5d, 0x29, 0x54, 0x53, 0x08, 0x75, 0x2d, 0xd1, 0x00, 0x79, 0x0c,
	0xcd, 0xb3, 0x84, 0x8e, 0x27, 0x4e, 0x8c, 0x4a, 0xcb, 0x5b, 0x22, 0xa4, 0x19, 0xe5, 0x50, 0xce,
	0xe1, 0x79, 0x98, 0xd0, 0xb1, 0x6c, 0x0d, 0x91, 0x1c, 0xc6, 0x73, 0x84, 0x73, 0xf5, 0x86, 0xba,
	0x48, 0x55, 0xab, 0xb7, 0x25, 0x57, 0x61, 0x0a, 0xe9, 0x31, 0x6e, 0xcd, 0xc7, 0x98, 0x3c, 0x81,
	0xc6, 0x71, 0x42, 0x29, 0x06, 0xe3, 0x99, 0xb5, 0x23, 0x6e, 0xb8, 0xa5, 0x6e, 0x78, 0xce, 0xa8,
	0x17, 0x5c, 0x89, 0x0b, 0x36, 0xc6, 0x2a, 0x84, 0x7c, 0xa2, 0xb4, 0xbe, 0x2b, 0xb4, 0xae, 0x43,
	0xa5, 0xea, 0x52, 0xa5, 0x77, 0xfe, 0x28, 0x43, 0x7d, 0xe8, 0xb0, 0x84, 0xe2, 0x0d, 0x29, 0x5a,
	0xb0, 0xca, 0x77, 0xf1, 0x30, 0x99, 0x2a, 0x2d, 0xae, 0x4e, 0xa5, 0x49, 0x1e, 0xca, 0x2d, 0x2d,
	0xc4, 0x68, 0x74, 0x0d, 0xf5, 0x6d, 0x0e, 0xd9, 0x55, 0x1e, 0xc3, 0x79, 0xca, 0x88, 0x9c, 0x7f,
	0x41, 0xca, 0xb3, 0xe9, 0xe5, 0x50, 0x72, 0x94, 0x1b, 0x06, 0x21, 0xd2, 0xb4, 0x71, 0x19, 0x8f,
	0x6d, 0x64, 0x12, 0xb9, 0x02, 0x4f, 0xc3, 0x2b, 0x2e, 0x32, 0xa5, 0x5c, 0x5f, 0x58, 0x1c, 0xef,
	0x63, 0xe4, 0x8d, 0xf5, 0x66, 0xae, 0xbb, 0xc2, 0xe2, 0x17, 0xe9, 0x45, 0x91, 0x3f, 0xeb, 0x31,
	0xbd, 0x3f, 0x1c, 0x69, 0xe6, 0x15, 0xb9, 0xb6, 0x54, 0x91, 0xb0, 0x54, 0x91, 0x46, 0x71, 0xce,
	0x7f, 0x2b, 0xc1, 0xf6, 0xd9, 0x24, 0x64, 0xa1, 0xba, 0x00, 0xfa, 0x8e, 0x98, 0x81, 0x22, 0xc9,
	0xb9, 0x0a, 0xca, 0x4b, 0x2b, 0xa8, 0x2c, 0xad, 0xa0, 0xba, 0xe0, 0x31, 0x12, 0x05, 0x8c, 0x46,
	0x83, 0xbe, 0x7e, 0xe6, 0x22, 0x0d, 0x90, 0x8f, 0x61, 0x23, 0xc3, 0xef, 0xa0, 0xaf, 0xa8, 0xdc,
	0xf0, 0xb2, 0x60, 0xe7, 0x73, 0x00, 0x29, 0x8e, 0x53, 0x2f, 0x66, 0xe4, 0x11, 0x54, 0xfb, 0x0e,
	0x73, 0xac, 0xd2, 0x5e, 0x65, 0xdf, 0xe8, 0x6e, 0xa8, 0x36, 0xc9, 0x00, 0xbb, 0xea, 0x3a, 0xcc,
	0xe9, 0x7c, 0x06, 0x0d, 0x2e, 0x03, 0x11, 0xfe, 0x30, 0x17, 0x9e, 0x57, 0x89, 0x08, 0x7e, 0x0a,
	0xeb, 0x7a, 0xf7, 0x8a, 0x84, 0x8f, 0x72, 0x09, 0x9b, 0x85, 0xf5, 0xac, 0x92, 0xbe, 0x82, 0xcd,
	0x4c, 0xe1, 0x22, 0xef, 0x71, 0x2e, 0x6f, 0x91, 0x7c, 0x64, 0xea, 0x43, 0xfe, 0xca, 0xf0, 0x51,
	0x19, 0xf4, 0xc5, 0xdb, 0x39, 0x4f, 0x5a, 0x53, 0x01, 0x0f, 0xa0, 0xa1, 0x03, 0x32, 0xfe, 0xd2,
	0xdc, 0x7f, 0x04, 0xc0, 0xc9, 0x7b, 0xeb, 0xb1, 0x89, 0x8c, 0x10, 0xdc, 0xaa, 0x88, 0x64, 0x94,
	0xc9, 0x2a, 0x67, 0xb2, 0x7e, 0x16, 0xcb, 0x89, 0x2a, 0xf1, 0x1e, 0x40, 0x5d, 0xa9, 0xbd, 0x74,
	0xab, 0xda, 0xeb, 0x97, 0x32, 0x56, 0x9f, 0x50, 0xce, 0x9c, 0xc0, 0xd7, 0x2f, 0xc5, 0x4b, 0x94,
	0x7f, 0x79, 0x1a, 0x76, 0x3d, 0x12, 0x16, 0x8f, 0x3d, 0x73, 0x3c, 0x57, 0xe8, 0xa0, 0x61, 0x57,
	0x23, 0xc7, 0x73, 0x0f, 0x2e, 0x52, 0x82, 0xf9, 0xc8, 0x93, 0x16, 0x98, 0x59, 0x7b, 0x38, 0x3a,
	0x3d, 0x35, 0x57, 0xc8, 0x2e, 0x90, 0x2c, 0x2a, 0x6b, 0x30, 0x4b, 0x45, 0xfc, 0x0d, 0x9b, 0x20,
	0x8d, 0xcd, 0xf2, 0xc1, 0x8f, 0xd0, 0xcc, 0xbf, 0xaf, 0xd9, 0x48, 0x89, 0xa8, 0x2f, 0x5b, 0xd0,
	0xca, 0xe3, 0x6f, 0x02, 0xdf, 0x0b, 0xd0, 0x2c, 0x91, 0xff, 0xc2, 0x4e, 0xc1, 0x73, 0x79, 0x29,
	0x5c, 0xe5, 0x83, 0x1f, 0x00, 0xd2, 0x2d, 0x45, 0x08, 0x34, 0x53, 0x4b, 0x7d, 0xb6, 0x05, 0x66,
	0x8a, 0x9d, 0xcf, 0x62, 0x86, 0x53, 0xb3, 0x44, 0x1e, 0xc1, 0xff, 0x53, 0xb4, 0xef, 0x78, 0xfe,
	0xcc, 0xc6, 0x71, 0x38, 0x9d, 0x62, 0xe0, 0x8a, 0xd1, 0x33, 0xcb, 0xdd, 0x3f, 0x0d, 0x68, 0x0e,
	0xc4, 0x3f, 0xd5, 0x73, 0xa4, 0x1f, 0xbc, 0x31, 0xc6, 0xe4, 0x08, 0x60, 0x88, 0xd7, 0x52, 0xc3,
	0x31, 0xd9, 0xca, 0x69, 0x9a, 0x8b, 0xab, 0x7d, 0x13, 0xea, 0xac, 0x90, 0x2f, 0x81, 0xc8, 0xc9,
	0x53, 0x89, 0x2f, 0x67, 0x5c, 0x52, 0x66, 0x6e, 0x1f, 0x0f, 0xfa, 0x71, 0xdb, 0xc8, 0xbc, 0x41,
	0x9d, 0x15, 0xf2, 0x0c, 0x9a, 0x27, 0xc8, 0x64, 0xce, 0x6d, 0x29, 0x0b, 0xcf, 0x7b, 0x06, 0x1b,
	0x72, 0x0f, 0xdc, 0xb7, 0xd0, 0x6f, 0x60, 0xfb, 0x95, 0x17, 0xb8, 0xf3, 0x32, 0xe5, 0xcb, 0x4d,
	0x5a, 0x2a, 0xd6, 0xc6, 0xf7, 0x09, 0xc6, 0x4c, 0xa2, 0x6d, 0x5d, 0xcc, 0x99, 0x73, 0x85, 0xaf,
	0x43, 0x17, 0x7d, 0x71, 0xd3, 0xad, 0x13, 0x64, 0xa9, 0x7e, 0x79, 0xd9, 0xf3, 0xd3, 0xd3, 0x61,
	0x28, 0xde, 0xf4, 0x08, 0xcc, 0x41, 0x10, 0x23, 0xcd, 0x64, 0xa6, 0x59, 0x73, 0xa8, 0x98, 0xf5,
	0x1c, 0xc8, 0x09, 0xb2, 0xcc, 0x24, 0x88, 0xd3, 0x36, 0x0b, 0x1c, 0xb5, 0x17, 0x8c, 0x4c, 0x67,
	0x85, 0x1c, 0x42, 0x63, 0x88, 0xd7, 0x7c, 0xbd, 0xc4, 0xf3, 0x14, 0xbd, 0x8b, 0xda, 0x45, 0xa0,
	0xb3, 0x42, 0x9e, 0x82, 0x29, 0x7b, 0x28, 0x52, 0xee, 0xd8, 0xc1, 0x43, 0x58, 0x3f, 0x41, 0xc6,
	0x33, 0x5e, 0xce, 0xf8, 0x03, 0x96, 0xdd, 0x6a, 0x8b, 0x0f, 0x49, 0xe3, 0x17, 0x1f, 0xb0, 0x20,
	0xe9, 0x0b, 0x30, 0x64, 0xb7, 0xef, 0x7e, 0x99, 0x17, 0xb0, 0xc5, 0xfb, 0xac, 0xae, 0x72, 0xef,
	0x2e, 0x7f, 0x0d, 0xeb, 0x43, 0xbc, 0xd6, 0x13, 0x19, 0x93, 0xe2, 0x5f, 0x63, 0x71, 0xec, 0x22,
	0x50, 0x68, 0xb3, 0x25, 0x79, 0x9c, 0xa7, 0xdf, 0x91, 0xcb, 0xe7, 0x60, 0x9e, 0x20, 0xd3, 0x59,
	0xb7, 0x25, 0xdd, 0x72, 0xea, 0x0b, 0xd8, 0x94, 0x1c, 0xfd, 0xbd, 0xa2, 0x7b, 0xb0, 0xc3, 0xf9,
	0xca, 0x94, 0x7c, 0x6f, 0xce, 0x8e, 0x61, 0x73, 0x88, 0xd7, 0x19, 0x0d, 0xc6, 0x64, 0xf7, 0xa6,
	0x30, 0x45, 0x11, 0xb7, 0xe0, 0x82, 0xf8, 0xff, 0x48, 0xf2, 0xb2, 0xdf, 0xb9, 0x23, 0x7f, 0x3d,
	0xd8, 0xbe, 0x39, 0x2d, 0x8b, 0xf2, 0x6e, 0x3f, 0xfe, 0xf8, 0xe6, 0x27, 0xb8, 0xaa, 0x17, 0x0c,
	0xd8, 0x92, 0x8f, 0xbc, 0x02, 0x22, 0x5b, 0xf1, 0x0f, 0xb9, 0xe8, 0x83, 0xc5, 0x7b, 0x92, 0x67,
	0xe2, 0xbe, 0x6d, 0x79, 0x57, 0x17, 0xd0, 0xd3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x38, 0x5b,
	0x33, 0xb2, 0x93, 0x10, 0x00, 0x00,
}
