// Code generated by protoc-gen-go.
// source: queryparameter.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryParameter struct {
	SinceID int32  `protobuf:"varint,1,opt,name=SinceID,json=sinceID" json:"SinceID,omitempty"`
	MaxID   int32  `protobuf:"varint,2,opt,name=MaxID,json=maxID" json:"MaxID,omitempty"`
	Page    int32  `protobuf:"varint,3,opt,name=Page,json=page" json:"Page,omitempty"`
	Count   int32  `protobuf:"varint,4,opt,name=Count,json=count" json:"Count,omitempty"`
	All     bool   `protobuf:"varint,5,opt,name=All,json=all" json:"All,omitempty"`
	OrderBy string `protobuf:"bytes,6,opt,name=OrderBy,json=orderBy" json:"OrderBy,omitempty"`
}

func (m *QueryParameter) Reset()                    { *m = QueryParameter{} }
func (m *QueryParameter) String() string            { return proto1.CompactTextString(m) }
func (*QueryParameter) ProtoMessage()               {}
func (*QueryParameter) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

type PageModel struct {
	TotalCount int64    `protobuf:"varint,1,opt,name=TotalCount,json=totalCount" json:"TotalCount,omitempty"`
	List       [][]byte `protobuf:"bytes,2,rep,name=List,json=list,proto3" json:"List,omitempty"`
}

func (m *PageModel) Reset()                    { *m = PageModel{} }
func (m *PageModel) String() string            { return proto1.CompactTextString(m) }
func (*PageModel) ProtoMessage()               {}
func (*PageModel) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func init() {
	proto1.RegisterType((*QueryParameter)(nil), "proto.QueryParameter")
	proto1.RegisterType((*PageModel)(nil), "proto.PageModel")
}

func init() { proto1.RegisterFile("queryparameter.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x8f, 0xc1, 0x4a, 0x83, 0x31,
	0x10, 0x84, 0x49, 0x93, 0xf4, 0xb7, 0x8b, 0x88, 0x84, 0x1e, 0xf6, 0x24, 0xa1, 0xa7, 0x9c, 0xbc,
	0xf8, 0x00, 0xa2, 0xf6, 0x52, 0xb0, 0x58, 0xa3, 0x2f, 0x10, 0xdb, 0xa5, 0xfc, 0x90, 0x36, 0xbf,
	0xf9, 0x53, 0xb0, 0x2f, 0xe2, 0xf3, 0xca, 0x26, 0xd8, 0x53, 0xf8, 0x66, 0x86, 0xc9, 0x2c, 0xcc,
	0xbf, 0x4f, 0x94, 0xcf, 0x43, 0xc8, 0xe1, 0x40, 0x85, 0xf2, 0xfd, 0x90, 0x53, 0x49, 0x46, 0xd7,
	0x67, 0xf1, 0x2b, 0xe0, 0xe6, 0x9d, 0xfd, 0xcd, 0xbf, 0x6f, 0x10, 0xba, 0x8f, 0xfe, 0xb8, 0xa5,
	0xd5, 0x12, 0x85, 0x15, 0x4e, 0xfb, 0x6e, 0x6c, 0x68, 0xe6, 0xa0, 0xd7, 0xe1, 0x67, 0xb5, 0xc4,
	0x49, 0xd5, 0xf5, 0x81, 0xc1, 0x18, 0x50, 0x9b, 0xb0, 0x27, 0x94, 0x55, 0x54, 0x43, 0xd8, 0x13,
	0x27, 0x5f, 0xd2, 0xe9, 0x58, 0x50, 0xb5, 0xe4, 0x96, 0xc1, 0xdc, 0x82, 0x7c, 0x8a, 0x11, 0xb5,
	0x15, 0xee, 0xca, 0xcb, 0x10, 0x23, 0xff, 0xf5, 0x96, 0x77, 0x94, 0x9f, 0xcf, 0x38, 0xb5, 0xc2,
	0xcd, 0x7c, 0x97, 0x1a, 0x2e, 0x1e, 0x61, 0xc6, 0xad, 0xeb, 0xb4, 0xa3, 0x68, 0xee, 0x00, 0x3e,
	0x53, 0x09, 0xb1, 0x75, 0xf2, 0x2a, 0xe9, 0xa1, 0x5c, 0x14, 0x9e, 0xf0, 0xda, 0x8f, 0x05, 0x27,
	0x56, 0xba, 0x6b, 0xaf, 0x62, 0x3f, 0x96, 0xaf, 0x69, 0x3d, 0xf0, 0xe1, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x76, 0x60, 0x96, 0x18, 0xff, 0x00, 0x00, 0x00,
}
