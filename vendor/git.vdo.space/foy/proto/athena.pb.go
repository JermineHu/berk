// Code generated by protoc-gen-go.
// source: athena.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	athena.proto
	comment.proto
	diary.proto
	dod.proto
	dream.proto
	feedback.proto
	icarus.proto
	notice.proto
	nulltype.proto
	photo.proto
	photoechooption.proto
	pupbatch.proto
	queryparameter.proto
	search.proto
	user.proto

It has these top-level messages:
	News
	AllUserNewsRequest
	AllUserNewsResponse
	NewsList
	Comment
	NewsComments
	NewsComment
	Diary
	OrderList
	BatchSetOrderStatus
	Order
	OrderItem
	OrderItemSnapshot
	Empty
	IncrementRequest
	Users
	PostUserRequest
	UserResponse
	PostAccountRequest
	PutUserByIDRequest
	PutUserByUUIDRequest
	PutUserPasswordRequest
	PutUserTypeRequest
	PutUserStatusRequest
	GetByIDRequest
	GetUserByTusoIDRequest
	GetByUUIDRequest
	GetUserByMobileRequest
	GetUserByEmailRequest
	GetByIDsRequest
	GetByUUIDsRequest
	GetUserByMobilesRequest
	FindUserRequest
	Bool
	PhoneRequest
	SockpuppetRequest
	StringArrayRequest
	RequestParams
	UserRelations
	PostRelationRequest
	RelationResponse
	FindByIDWithQPRequest
	GetRelationRequest
	UserRelationTypeResponse
	Comments
	PostCommentRequest
	CommentResponse
	FindPCWithoutOwnerRequest
	FindPhotoReplyRequest
	FirstCommentRequest
	PostDiaryRequest
	DiaryResponse
	DiaryByIDRequest
	Diaries
	FindByUUIDWithQPRequest
	PostFeedbackRequest
	NoteResponse
	PostNoteRequest
	Notes
	NoteByIDRequest
	NoteByUUIDRequest
	PhotoWithEchoOptionRequest
	PhotoResponse
	PhotoWithUUIDRequest
	PhotoWithIDRequest
	IDAndUUIDWithEchoOptionRequest
	UUIDAndVersionWithPhotoRequest
	PutPhotoIllegalStatusRequest
	Photos
	UUIDsWithEchoOptionRequest
	IDsWithEchoOptionRequest
	IDWithEchoOptionRequest
	UUIDWithEchoOptionRequest
	UUIDWithIdentifierRequest
	UUIDWithOptionRequest
	IDWithOptionRequest
	PostFileRequest
	FileResponse
	FileWithIDRequest
	FileWithUUIDRequest
	FileWithPIDRequest
	Files
	Feedback
	Mood
	Activity
	ImageFilter
	Nature
	PhotoFilterRelation
	NatureList
	MoodList
	ActivityList
	ImageFilterList
	StringIDs
	StringID
	UUIDWithID
	UserFilter
	Notice
	StringType
	IntegerType
	BooleanType
	FloatType
	BasePhoto
	Photo
	Note
	File
	PhotoTimeAxis
	PhotoEchoOption
	PupBatchOperationRequest
	QueryParameter
	PageModel
	Followee
	Follower
	FollowUser
	FollowUUIDS
	Location
	User
	UserRelation
	FolloweeUser
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type News struct {
	ID           int64    `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	UUID         string   `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	CreatedAt    string   `protobuf:"bytes,3,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UpdatedAt    string   `protobuf:"bytes,4,opt,name=UpdatedAt,json=updatedAt" json:"UpdatedAt,omitempty"`
	DeletedAt    string   `protobuf:"bytes,5,opt,name=DeletedAt,json=deletedAt" json:"DeletedAt,omitempty"`
	UserID       int64    `protobuf:"varint,6,opt,name=UserID,json=userID" json:"UserID,omitempty"`
	PhotoIDs     []int64  `protobuf:"varint,7,rep,packed,name=PhotoIDs,json=photoIDs" json:"PhotoIDs,omitempty"`
	PhotoCount   int64    `protobuf:"varint,8,opt,name=PhotoCount,json=photoCount" json:"PhotoCount,omitempty"`
	CommentCount int64    `protobuf:"varint,9,opt,name=CommentCount,json=commentCount" json:"CommentCount,omitempty"`
	StarredCount int64    `protobuf:"varint,10,opt,name=StarredCount,json=starredCount" json:"StarredCount,omitempty"`
	Timestamp    string   `protobuf:"bytes,11,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	User         *User    `protobuf:"bytes,12,opt,name=User,json=user" json:"User,omitempty"`
	Photos       []*Photo `protobuf:"bytes,13,rep,name=Photos,json=photos" json:"Photos,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto1.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *News) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *News) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

type AllUserNewsRequest struct {
	OffsetHead int64  `protobuf:"varint,1,opt,name=offsetHead" json:"offsetHead,omitempty"`
	OffsetTail int64  `protobuf:"varint,2,opt,name=offsetTail" json:"offsetTail,omitempty"`
	StartTime  string `protobuf:"bytes,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime    string `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *AllUserNewsRequest) Reset()                    { *m = AllUserNewsRequest{} }
func (m *AllUserNewsRequest) String() string            { return proto1.CompactTextString(m) }
func (*AllUserNewsRequest) ProtoMessage()               {}
func (*AllUserNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AllUserNewsResponse struct {
	Count    int64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	TusoList []*News `protobuf:"bytes,2,rep,name=tusoList" json:"tusoList,omitempty"`
}

func (m *AllUserNewsResponse) Reset()                    { *m = AllUserNewsResponse{} }
func (m *AllUserNewsResponse) String() string            { return proto1.CompactTextString(m) }
func (*AllUserNewsResponse) ProtoMessage()               {}
func (*AllUserNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AllUserNewsResponse) GetTusoList() []*News {
	if m != nil {
		return m.TusoList
	}
	return nil
}

type NewsList struct {
	Data []*News `protobuf:"bytes,1,rep,name=Data,json=data" json:"Data,omitempty"`
}

func (m *NewsList) Reset()                    { *m = NewsList{} }
func (m *NewsList) String() string            { return proto1.CompactTextString(m) }
func (*NewsList) ProtoMessage()               {}
func (*NewsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewsList) GetData() []*News {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto1.RegisterType((*News)(nil), "proto.News")
	proto1.RegisterType((*AllUserNewsRequest)(nil), "proto.AllUserNewsRequest")
	proto1.RegisterType((*AllUserNewsResponse)(nil), "proto.AllUserNewsResponse")
	proto1.RegisterType((*NewsList)(nil), "proto.NewsList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AthenaServices service

type AthenaServicesClient interface {
	GetNewsByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error)
	BatchStarToTuso(ctx context.Context, in *PupBatchOperationRequest, opts ...client.CallOption) (*Bool, error)
	BatchUnStarToTuso(ctx context.Context, in *PupBatchOperationRequest, opts ...client.CallOption) (*Bool, error)
	FindCommentsByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*NewsComments, error)
	FindCommentsByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*NewsComments, error)
	FindNewsByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*NewsList, error)
}

type athenaServicesClient struct {
	c           client.Client
	serviceName string
}

func NewAthenaServicesClient(serviceName string, c client.Client) AthenaServicesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto"
	}
	return &athenaServicesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *athenaServicesClient) GetNewsByParams(ctx context.Context, in *RequestParams, opts ...client.CallOption) (*PageModel, error) {
	req := c.c.NewRequest(c.serviceName, "AthenaServices.GetNewsByParams", in)
	out := new(PageModel)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athenaServicesClient) BatchStarToTuso(ctx context.Context, in *PupBatchOperationRequest, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "AthenaServices.BatchStarToTuso", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athenaServicesClient) BatchUnStarToTuso(ctx context.Context, in *PupBatchOperationRequest, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "AthenaServices.BatchUnStarToTuso", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athenaServicesClient) FindCommentsByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*NewsComments, error) {
	req := c.c.NewRequest(c.serviceName, "AthenaServices.FindCommentsByIDs", in)
	out := new(NewsComments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athenaServicesClient) FindCommentsByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*NewsComments, error) {
	req := c.c.NewRequest(c.serviceName, "AthenaServices.FindCommentsByUUIDs", in)
	out := new(NewsComments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athenaServicesClient) FindNewsByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*NewsList, error) {
	req := c.c.NewRequest(c.serviceName, "AthenaServices.FindNewsByUUIDs", in)
	out := new(NewsList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AthenaServices service

type AthenaServicesHandler interface {
	GetNewsByParams(context.Context, *RequestParams, *PageModel) error
	BatchStarToTuso(context.Context, *PupBatchOperationRequest, *Bool) error
	BatchUnStarToTuso(context.Context, *PupBatchOperationRequest, *Bool) error
	FindCommentsByIDs(context.Context, *GetByIDsRequest, *NewsComments) error
	FindCommentsByUUIDs(context.Context, *GetByUUIDsRequest, *NewsComments) error
	FindNewsByUUIDs(context.Context, *GetByUUIDsRequest, *NewsList) error
}

func RegisterAthenaServicesHandler(s server.Server, hdlr AthenaServicesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AthenaServices{hdlr}, opts...))
}

type AthenaServices struct {
	AthenaServicesHandler
}

func (h *AthenaServices) GetNewsByParams(ctx context.Context, in *RequestParams, out *PageModel) error {
	return h.AthenaServicesHandler.GetNewsByParams(ctx, in, out)
}

func (h *AthenaServices) BatchStarToTuso(ctx context.Context, in *PupBatchOperationRequest, out *Bool) error {
	return h.AthenaServicesHandler.BatchStarToTuso(ctx, in, out)
}

func (h *AthenaServices) BatchUnStarToTuso(ctx context.Context, in *PupBatchOperationRequest, out *Bool) error {
	return h.AthenaServicesHandler.BatchUnStarToTuso(ctx, in, out)
}

func (h *AthenaServices) FindCommentsByIDs(ctx context.Context, in *GetByIDsRequest, out *NewsComments) error {
	return h.AthenaServicesHandler.FindCommentsByIDs(ctx, in, out)
}

func (h *AthenaServices) FindCommentsByUUIDs(ctx context.Context, in *GetByUUIDsRequest, out *NewsComments) error {
	return h.AthenaServicesHandler.FindCommentsByUUIDs(ctx, in, out)
}

func (h *AthenaServices) FindNewsByUUIDs(ctx context.Context, in *GetByUUIDsRequest, out *NewsList) error {
	return h.AthenaServicesHandler.FindNewsByUUIDs(ctx, in, out)
}

func init() { proto1.RegisterFile("athena.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0x8d, 0x2d, 0xc5, 0xb1, 0xc7, 0x4e, 0xdc, 0x6c, 0x42, 0x58, 0x4c, 0x69, 0x8c, 0x28, 0xd4,
	0x50, 0xc8, 0x21, 0x3d, 0x16, 0x0a, 0xb6, 0x45, 0x52, 0x43, 0x3f, 0x82, 0x63, 0xff, 0x80, 0x8d,
	0x34, 0x69, 0x04, 0x96, 0x76, 0xa3, 0x5d, 0xb5, 0xf8, 0x07, 0xf4, 0xd6, 0x3f, 0xd1, 0x7f, 0x5a,
	0x66, 0x57, 0xeb, 0x2a, 0xf4, 0x90, 0x43, 0x4f, 0xf6, 0xbc, 0xf7, 0xe6, 0xf1, 0x66, 0x46, 0x0b,
	0x03, 0x61, 0x1e, 0xb0, 0x10, 0x17, 0xaa, 0x94, 0x46, 0xb2, 0x7d, 0xfb, 0x33, 0x82, 0x4a, 0x63,
	0xe9, 0xa0, 0x51, 0x5f, 0x3d, 0x48, 0x23, 0xeb, 0xe2, 0x48, 0x55, 0xea, 0x4e, 0x98, 0xe4, 0xc1,
	0x93, 0x69, 0x89, 0x22, 0xaf, 0x8b, 0xd3, 0xc7, 0x0a, 0xcb, 0xad, 0x12, 0xa5, 0xc8, 0xd1, 0xec,
	0xfa, 0x0f, 0x13, 0x99, 0xe7, 0x58, 0x18, 0x57, 0x46, 0x3f, 0x03, 0x08, 0xbf, 0xe0, 0x0f, 0xcd,
	0x8e, 0xa0, 0xbd, 0x88, 0x79, 0x6b, 0xdc, 0x9a, 0x04, 0xcb, 0x76, 0x16, 0x33, 0x06, 0xe1, 0x7a,
	0xbd, 0x88, 0x79, 0x7b, 0xdc, 0x9a, 0xf4, 0x96, 0x61, 0xb5, 0x5e, 0xc4, 0xec, 0x25, 0xf4, 0xe6,
	0x25, 0x0a, 0x83, 0xe9, 0xd4, 0xf0, 0xc0, 0x12, 0xbd, 0xc4, 0x03, 0xc4, 0xae, 0x55, 0x5a, 0xb3,
	0xa1, 0x63, 0x2b, 0x0f, 0x10, 0x1b, 0xe3, 0x06, 0x1d, 0xbb, 0xef, 0xd8, 0xd4, 0x03, 0xec, 0x0c,
	0x3a, 0x6b, 0x8d, 0xe5, 0x22, 0xe6, 0x1d, 0x9b, 0xa0, 0x53, 0xd9, 0x8a, 0x8d, 0xa0, 0x7b, 0x43,
	0xf3, 0x2e, 0x62, 0xcd, 0x0f, 0xc6, 0xc1, 0x24, 0x58, 0x76, 0x55, 0x5d, 0xb3, 0x57, 0x00, 0x96,
	0x9b, 0xcb, 0xaa, 0x30, 0xbc, 0x6b, 0xfb, 0x40, 0xed, 0x10, 0x16, 0xc1, 0x60, 0xee, 0x66, 0x75,
	0x8a, 0x9e, 0x55, 0x0c, 0x92, 0x06, 0x46, 0x9a, 0x5b, 0x23, 0xca, 0x12, 0x53, 0xa7, 0x01, 0xa7,
	0xd1, 0x0d, 0x8c, 0x92, 0xaf, 0xb2, 0x1c, 0xb5, 0x11, 0xb9, 0xe2, 0x7d, 0x97, 0xdc, 0x78, 0x80,
	0x9d, 0x43, 0x48, 0xc9, 0xf9, 0x60, 0xdc, 0x9a, 0xf4, 0x2f, 0xfb, 0x6e, 0xad, 0x17, 0x04, 0x2d,
	0x43, 0x1a, 0x82, 0xbd, 0x86, 0x8e, 0x8d, 0xa9, 0xf9, 0xe1, 0x38, 0x98, 0xf4, 0x2f, 0x07, 0xb5,
	0xc4, 0x82, 0xcb, 0x8e, 0x0d, 0xac, 0xa3, 0x5f, 0x2d, 0x60, 0xd3, 0xcd, 0x86, 0xfa, 0xe8, 0x1c,
	0x4b, 0x7c, 0xac, 0x50, 0x1b, 0x9a, 0x51, 0xde, 0xdf, 0x6b, 0x34, 0x1f, 0x51, 0xa4, 0xf5, 0x75,
	0x1a, 0xc8, 0x5f, 0x7e, 0x25, 0xb2, 0x8d, 0xbd, 0xd5, 0x8e, 0x27, 0x84, 0xb2, 0xd3, 0x2c, 0x86,
	0x06, 0xf0, 0x17, 0xdb, 0x01, 0x8c, 0xc3, 0x01, 0x16, 0xa9, 0xe5, 0xdc, 0xbd, 0x7c, 0x19, 0xad,
	0xe0, 0xe4, 0x49, 0x1a, 0xad, 0x64, 0xa1, 0x91, 0x9d, 0xc2, 0x7e, 0x62, 0xf7, 0xe4, 0x92, 0xb8,
	0x82, 0xbd, 0x81, 0xae, 0xa9, 0xb4, 0xfc, 0x94, 0x69, 0xc3, 0xdb, 0x76, 0x46, 0xbf, 0x06, 0xdb,
	0xbc, 0x23, 0xa3, 0xb7, 0xd0, 0x25, 0x84, 0xfe, 0xd3, 0xde, 0x62, 0x61, 0x04, 0x6f, 0xfd, 0xdb,
	0x10, 0xa6, 0xc2, 0x88, 0xcb, 0xdf, 0x01, 0x1c, 0x4d, 0xed, 0x63, 0xb8, 0xc5, 0xf2, 0x7b, 0x96,
	0xa0, 0x66, 0xef, 0x61, 0x78, 0x8d, 0x86, 0x34, 0xb3, 0xed, 0x0d, 0x7d, 0xd7, 0x9a, 0x9d, 0xd6,
	0x8d, 0xf5, 0xc2, 0x1c, 0x3a, 0x7a, 0xe1, 0x77, 0x2c, 0xbe, 0xe1, 0x67, 0x99, 0xe2, 0x26, 0xda,
	0x63, 0x53, 0x18, 0xce, 0xe8, 0xa9, 0xd0, 0xbd, 0x57, 0x72, 0x55, 0x69, 0xc9, 0xce, 0xbd, 0xac,
	0x52, 0x96, 0xfa, 0xaa, 0xb0, 0x14, 0x26, 0x93, 0x45, 0xed, 0x36, 0xf2, 0xb1, 0x66, 0x52, 0x92,
	0xc5, 0x1c, 0x8e, 0xad, 0x6e, 0x5d, 0xfc, 0x87, 0xc9, 0x0c, 0x8e, 0xaf, 0xb2, 0x22, 0xad, 0x3f,
	0x4d, 0x3d, 0xdb, 0xd2, 0xb7, 0x7c, 0x56, 0x6b, 0xae, 0xd1, 0x58, 0xc0, 0xf7, 0x9e, 0x34, 0xf6,
	0xe2, 0x3b, 0xa2, 0x3d, 0x76, 0x05, 0x27, 0x4f, 0x3d, 0xe8, 0xa9, 0x6a, 0xc6, 0x9b, 0x2e, 0x16,
	0x7a, 0xc6, 0xe7, 0x03, 0x0c, 0xc9, 0xc7, 0x6d, 0xf4, 0x39, 0x8f, 0x61, 0xc3, 0xc3, 0x9e, 0x73,
	0xef, 0xae, 0x63, 0x91, 0x77, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x00, 0x77, 0x8c, 0xb6,
	0x04, 0x00, 0x00,
}
